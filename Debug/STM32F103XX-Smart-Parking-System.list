
STM32F103XX-Smart-Parking-System.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001aa4  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  08001bd4  08001bd4  00011bd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001c74  08001c74  000200f8  2**0
                  CONTENTS
  4 .ARM          00000000  08001c74  08001c74  000200f8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001c74  08001c74  000200f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001c74  08001c74  00011c74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001c78  08001c78  00011c78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000f8  20000000  08001c7c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d4  200000f8  08001d74  000200f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001cc  08001d74  000201cc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009e14  00000000  00000000  00020121  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001595  00000000  00000000  00029f35  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00001cf4  00000000  00000000  0002b4ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000420  00000000  00000000  0002d1c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000378  00000000  00000000  0002d5e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  0000160d  00000000  00000000  0002d958  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00004c78  00000000  00000000  0002ef65  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0000d0fd  00000000  00000000  00033bdd  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  00040cda  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000e54  00000000  00000000  00040d58  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	200000f8 	.word	0x200000f8
 800014c:	00000000 	.word	0x00000000
 8000150:	08001bbc 	.word	0x08001bbc

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	200000fc 	.word	0x200000fc
 800016c:	08001bbc 	.word	0x08001bbc

08000170 <keypad_initialize>:
		{'#', '0', '=', '+'}
};



Std_ReturnType keypad_initialize( keypad_t *_keypad_obj){
 8000170:	b580      	push	{r7, lr}
 8000172:	b084      	sub	sp, #16
 8000174:	af00      	add	r7, sp, #0
 8000176:	6078      	str	r0, [r7, #4]

	uint8 rows_counter = 0, columns_counter = 0;
 8000178:	2300      	movs	r3, #0
 800017a:	73fb      	strb	r3, [r7, #15]
 800017c:	2300      	movs	r3, #0
 800017e:	73bb      	strb	r3, [r7, #14]

	for(rows_counter=0; rows_counter<ECU_KEYPAD_ROWS; rows_counter++){
 8000180:	2300      	movs	r3, #0
 8000182:	73fb      	strb	r3, [r7, #15]
 8000184:	e009      	b.n	800019a <keypad_initialize+0x2a>
		gpio_pin_intialize(&(_keypad_obj->keypad_row_pins[rows_counter]));
 8000186:	7bfb      	ldrb	r3, [r7, #15]
 8000188:	00db      	lsls	r3, r3, #3
 800018a:	687a      	ldr	r2, [r7, #4]
 800018c:	4413      	add	r3, r2
 800018e:	4618      	mov	r0, r3
 8000190:	f000 fada 	bl	8000748 <gpio_pin_intialize>
	for(rows_counter=0; rows_counter<ECU_KEYPAD_ROWS; rows_counter++){
 8000194:	7bfb      	ldrb	r3, [r7, #15]
 8000196:	3301      	adds	r3, #1
 8000198:	73fb      	strb	r3, [r7, #15]
 800019a:	7bfb      	ldrb	r3, [r7, #15]
 800019c:	2b03      	cmp	r3, #3
 800019e:	d9f2      	bls.n	8000186 <keypad_initialize+0x16>
	}
	for(columns_counter=ZERO_INIT; columns_counter<ECU_KEYPAD_COLUMNS; columns_counter++){
 80001a0:	2300      	movs	r3, #0
 80001a2:	73bb      	strb	r3, [r7, #14]
 80001a4:	e00a      	b.n	80001bc <keypad_initialize+0x4c>
		gpio_pin_intialize(&(_keypad_obj->keypad_columns_pins[columns_counter]));
 80001a6:	7bbb      	ldrb	r3, [r7, #14]
 80001a8:	3304      	adds	r3, #4
 80001aa:	00db      	lsls	r3, r3, #3
 80001ac:	687a      	ldr	r2, [r7, #4]
 80001ae:	4413      	add	r3, r2
 80001b0:	4618      	mov	r0, r3
 80001b2:	f000 fac9 	bl	8000748 <gpio_pin_intialize>
	for(columns_counter=ZERO_INIT; columns_counter<ECU_KEYPAD_COLUMNS; columns_counter++){
 80001b6:	7bbb      	ldrb	r3, [r7, #14]
 80001b8:	3301      	adds	r3, #1
 80001ba:	73bb      	strb	r3, [r7, #14]
 80001bc:	7bbb      	ldrb	r3, [r7, #14]
 80001be:	2b03      	cmp	r3, #3
 80001c0:	d9f1      	bls.n	80001a6 <keypad_initialize+0x36>
	}
	//gpio_port_write_logic(GPIOA, 0xFF);

}
 80001c2:	bf00      	nop
 80001c4:	4618      	mov	r0, r3
 80001c6:	3710      	adds	r7, #16
 80001c8:	46bd      	mov	sp, r7
 80001ca:	bd80      	pop	{r7, pc}

080001cc <keypad_get_value_blocking>:
		}

	//}
}

char keypad_get_value_blocking( keypad_t *_keypad_obj){
 80001cc:	b580      	push	{r7, lr}
 80001ce:	b086      	sub	sp, #24
 80001d0:	af00      	add	r7, sp, #0
 80001d2:	6078      	str	r0, [r7, #4]
	int i, j , k;
	logic_t logic;
	while (1){
		for (i = 0; i < 4; i++) {
 80001d4:	2300      	movs	r3, #0
 80001d6:	617b      	str	r3, [r7, #20]
 80001d8:	e043      	b.n	8000262 <keypad_get_value_blocking+0x96>
			for (k=0 ; k<4 ;k++)
 80001da:	2300      	movs	r3, #0
 80001dc:	60fb      	str	r3, [r7, #12]
 80001de:	e00b      	b.n	80001f8 <keypad_get_value_blocking+0x2c>
				//MCAL_GPIO_WritePin(KEYPAD_PORT, Key_padCol[k], GPIO_PIN_RESET);
				gpio_pin_write_logic(&(_keypad_obj->keypad_columns_pins[k]), GPIO_PIN_RESET);
 80001e0:	68fb      	ldr	r3, [r7, #12]
 80001e2:	3304      	adds	r3, #4
 80001e4:	00db      	lsls	r3, r3, #3
 80001e6:	687a      	ldr	r2, [r7, #4]
 80001e8:	4413      	add	r3, r2
 80001ea:	2100      	movs	r1, #0
 80001ec:	4618      	mov	r0, r3
 80001ee:	f000 fb52 	bl	8000896 <gpio_pin_write_logic>
			for (k=0 ; k<4 ;k++)
 80001f2:	68fb      	ldr	r3, [r7, #12]
 80001f4:	3301      	adds	r3, #1
 80001f6:	60fb      	str	r3, [r7, #12]
 80001f8:	68fb      	ldr	r3, [r7, #12]
 80001fa:	2b03      	cmp	r3, #3
 80001fc:	ddf0      	ble.n	80001e0 <keypad_get_value_blocking+0x14>

			//MCAL_GPIO_WritePin(KEYPAD_PORT, Key_padCol[i], GPIO_PIN_SET);
			gpio_pin_write_logic(&(_keypad_obj->keypad_columns_pins[i]), GPIO_PIN_SET);
 80001fe:	697b      	ldr	r3, [r7, #20]
 8000200:	3304      	adds	r3, #4
 8000202:	00db      	lsls	r3, r3, #3
 8000204:	687a      	ldr	r2, [r7, #4]
 8000206:	4413      	add	r3, r2
 8000208:	2101      	movs	r1, #1
 800020a:	4618      	mov	r0, r3
 800020c:	f000 fb43 	bl	8000896 <gpio_pin_write_logic>
			for (j = 0; j < 4; j++) {
 8000210:	2300      	movs	r3, #0
 8000212:	613b      	str	r3, [r7, #16]
 8000214:	e01f      	b.n	8000256 <keypad_get_value_blocking+0x8a>

				if (gpio_pin_read_logic(&(_keypad_obj->keypad_row_pins[j])) == 1) {
 8000216:	693b      	ldr	r3, [r7, #16]
 8000218:	00db      	lsls	r3, r3, #3
 800021a:	687a      	ldr	r2, [r7, #4]
 800021c:	4413      	add	r3, r2
 800021e:	4618      	mov	r0, r3
 8000220:	f000 fb26 	bl	8000870 <gpio_pin_read_logic>
 8000224:	4603      	mov	r3, r0
 8000226:	2b01      	cmp	r3, #1
 8000228:	d112      	bne.n	8000250 <keypad_get_value_blocking+0x84>
					while (gpio_pin_read_logic(&(_keypad_obj->keypad_row_pins[j])) == 1);
 800022a:	bf00      	nop
 800022c:	693b      	ldr	r3, [r7, #16]
 800022e:	00db      	lsls	r3, r3, #3
 8000230:	687a      	ldr	r2, [r7, #4]
 8000232:	4413      	add	r3, r2
 8000234:	4618      	mov	r0, r3
 8000236:	f000 fb1b 	bl	8000870 <gpio_pin_read_logic>
 800023a:	4603      	mov	r3, r0
 800023c:	2b01      	cmp	r3, #1
 800023e:	d0f5      	beq.n	800022c <keypad_get_value_blocking+0x60>

					return btn_values[i][j];
 8000240:	4a0c      	ldr	r2, [pc, #48]	; (8000274 <keypad_get_value_blocking+0xa8>)
 8000242:	697b      	ldr	r3, [r7, #20]
 8000244:	009b      	lsls	r3, r3, #2
 8000246:	441a      	add	r2, r3
 8000248:	693b      	ldr	r3, [r7, #16]
 800024a:	4413      	add	r3, r2
 800024c:	781b      	ldrb	r3, [r3, #0]
 800024e:	e00c      	b.n	800026a <keypad_get_value_blocking+0x9e>
			for (j = 0; j < 4; j++) {
 8000250:	693b      	ldr	r3, [r7, #16]
 8000252:	3301      	adds	r3, #1
 8000254:	613b      	str	r3, [r7, #16]
 8000256:	693b      	ldr	r3, [r7, #16]
 8000258:	2b03      	cmp	r3, #3
 800025a:	dddc      	ble.n	8000216 <keypad_get_value_blocking+0x4a>
		for (i = 0; i < 4; i++) {
 800025c:	697b      	ldr	r3, [r7, #20]
 800025e:	3301      	adds	r3, #1
 8000260:	617b      	str	r3, [r7, #20]
 8000262:	697b      	ldr	r3, [r7, #20]
 8000264:	2b03      	cmp	r3, #3
 8000266:	ddb8      	ble.n	80001da <keypad_get_value_blocking+0xe>
 8000268:	e7b4      	b.n	80001d4 <keypad_get_value_blocking+0x8>
				}
			}
		}

	}
}
 800026a:	4618      	mov	r0, r3
 800026c:	3718      	adds	r7, #24
 800026e:	46bd      	mov	sp, r7
 8000270:	bd80      	pop	{r7, pc}
 8000272:	bf00      	nop
 8000274:	08001c4c 	.word	0x08001c4c

08000278 <lcd_4bit_intialize>:
 * @param lcd
 * @return Status of the function
 *          (E_OK) : The function done successfully
 *          (E_NOT_OK) : The function has issue to perform this action
 */
Std_ReturnType lcd_4bit_intialize(const chr_lcd_4bit_t *lcd){
 8000278:	b580      	push	{r7, lr}
 800027a:	b084      	sub	sp, #16
 800027c:	af00      	add	r7, sp, #0
 800027e:	6078      	str	r0, [r7, #4]
    Std_ReturnType ret = E_OK;
 8000280:	2301      	movs	r3, #1
 8000282:	73fb      	strb	r3, [r7, #15]
    uint8 l_data_pins_counter = ZERO_INIT;
 8000284:	2300      	movs	r3, #0
 8000286:	73bb      	strb	r3, [r7, #14]
    if(NULL == lcd){
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	2b00      	cmp	r3, #0
 800028c:	d102      	bne.n	8000294 <lcd_4bit_intialize+0x1c>
        ret = E_NOT_OK;
 800028e:	2300      	movs	r3, #0
 8000290:	73fb      	strb	r3, [r7, #15]
 8000292:	e046      	b.n	8000322 <lcd_4bit_intialize+0xaa>
    }
    else{
         gpio_pin_intialize( &(lcd->lcd_en));
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	3308      	adds	r3, #8
 8000298:	4618      	mov	r0, r3
 800029a:	f000 fa55 	bl	8000748 <gpio_pin_intialize>
         gpio_pin_intialize(&(lcd->lcd_rs));
 800029e:	687b      	ldr	r3, [r7, #4]
 80002a0:	4618      	mov	r0, r3
 80002a2:	f000 fa51 	bl	8000748 <gpio_pin_intialize>

        for(l_data_pins_counter=ZERO_INIT; l_data_pins_counter<4; l_data_pins_counter++){
 80002a6:	2300      	movs	r3, #0
 80002a8:	73bb      	strb	r3, [r7, #14]
 80002aa:	e00a      	b.n	80002c2 <lcd_4bit_intialize+0x4a>
             gpio_pin_intialize(&(lcd->lcd_data[l_data_pins_counter]));
 80002ac:	7bbb      	ldrb	r3, [r7, #14]
 80002ae:	3302      	adds	r3, #2
 80002b0:	00db      	lsls	r3, r3, #3
 80002b2:	687a      	ldr	r2, [r7, #4]
 80002b4:	4413      	add	r3, r2
 80002b6:	4618      	mov	r0, r3
 80002b8:	f000 fa46 	bl	8000748 <gpio_pin_intialize>
        for(l_data_pins_counter=ZERO_INIT; l_data_pins_counter<4; l_data_pins_counter++){
 80002bc:	7bbb      	ldrb	r3, [r7, #14]
 80002be:	3301      	adds	r3, #1
 80002c0:	73bb      	strb	r3, [r7, #14]
 80002c2:	7bbb      	ldrb	r3, [r7, #14]
 80002c4:	2b03      	cmp	r3, #3
 80002c6:	d9f1      	bls.n	80002ac <lcd_4bit_intialize+0x34>
        }
        delay_ms(20);
 80002c8:	2014      	movs	r0, #20
 80002ca:	f000 fb0d 	bl	80008e8 <delay_ms>
         lcd_4bit_send_command(lcd, _LCD_8BIT_MODE_2_LINE);
 80002ce:	2138      	movs	r1, #56	; 0x38
 80002d0:	6878      	ldr	r0, [r7, #4]
 80002d2:	f000 f82b 	bl	800032c <lcd_4bit_send_command>
        delay_ms(5);
 80002d6:	2005      	movs	r0, #5
 80002d8:	f000 fb06 	bl	80008e8 <delay_ms>
         lcd_4bit_send_command(lcd, _LCD_8BIT_MODE_2_LINE);
 80002dc:	2138      	movs	r1, #56	; 0x38
 80002de:	6878      	ldr	r0, [r7, #4]
 80002e0:	f000 f824 	bl	800032c <lcd_4bit_send_command>
        delay_ms(1);
 80002e4:	2001      	movs	r0, #1
 80002e6:	f000 faff 	bl	80008e8 <delay_ms>
         lcd_4bit_send_command(lcd, _LCD_8BIT_MODE_2_LINE);
 80002ea:	2138      	movs	r1, #56	; 0x38
 80002ec:	6878      	ldr	r0, [r7, #4]
 80002ee:	f000 f81d 	bl	800032c <lcd_4bit_send_command>
         //delay_ms(1);
         lcd_4bit_send_command(lcd, _LCD_CLEAR);
 80002f2:	2101      	movs	r1, #1
 80002f4:	6878      	ldr	r0, [r7, #4]
 80002f6:	f000 f819 	bl	800032c <lcd_4bit_send_command>
         //delay_ms(1);
         lcd_4bit_send_command(lcd, _LCD_RETURN_HOME);
 80002fa:	2102      	movs	r1, #2
 80002fc:	6878      	ldr	r0, [r7, #4]
 80002fe:	f000 f815 	bl	800032c <lcd_4bit_send_command>
         //delay_ms(1);
         lcd_4bit_send_command(lcd, _LCD_ENTRY_MODE_INC_SHIFT_OFF);
 8000302:	2106      	movs	r1, #6
 8000304:	6878      	ldr	r0, [r7, #4]
 8000306:	f000 f811 	bl	800032c <lcd_4bit_send_command>
         //delay_ms(1);
         lcd_4bit_send_command(lcd, _LCD_DISPLAY_ON_UNDERLINE_ON_CURSOR_ON);
 800030a:	210f      	movs	r1, #15
 800030c:	6878      	ldr	r0, [r7, #4]
 800030e:	f000 f80d 	bl	800032c <lcd_4bit_send_command>
        // delay_ms(1);
        lcd_4bit_send_command(lcd, _LCD_4BIT_MODE_2_LINE);
 8000312:	2128      	movs	r1, #40	; 0x28
 8000314:	6878      	ldr	r0, [r7, #4]
 8000316:	f000 f809 	bl	800032c <lcd_4bit_send_command>
       // delay_ms(1);
         lcd_4bit_send_command(lcd, 0x80);
 800031a:	2180      	movs	r1, #128	; 0x80
 800031c:	6878      	ldr	r0, [r7, #4]
 800031e:	f000 f805 	bl	800032c <lcd_4bit_send_command>
         //delay_ms(1);
    }
    return ret;
 8000322:	7bfb      	ldrb	r3, [r7, #15]
}
 8000324:	4618      	mov	r0, r3
 8000326:	3710      	adds	r7, #16
 8000328:	46bd      	mov	sp, r7
 800032a:	bd80      	pop	{r7, pc}

0800032c <lcd_4bit_send_command>:
 * @param command
 * @return Status of the function
 *          (E_OK) : The function done successfully
 *          (E_NOT_OK) : The function has issue to perform this action
 */
Std_ReturnType lcd_4bit_send_command(const chr_lcd_4bit_t *lcd, uint8 command){
 800032c:	b580      	push	{r7, lr}
 800032e:	b084      	sub	sp, #16
 8000330:	af00      	add	r7, sp, #0
 8000332:	6078      	str	r0, [r7, #4]
 8000334:	460b      	mov	r3, r1
 8000336:	70fb      	strb	r3, [r7, #3]
    Std_ReturnType ret = E_OK;
 8000338:	2301      	movs	r3, #1
 800033a:	73fb      	strb	r3, [r7, #15]
    if(NULL == lcd){
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	2b00      	cmp	r3, #0
 8000340:	d102      	bne.n	8000348 <lcd_4bit_send_command+0x1c>
        ret = E_NOT_OK;
 8000342:	2300      	movs	r3, #0
 8000344:	73fb      	strb	r3, [r7, #15]
 8000346:	e02a      	b.n	800039e <lcd_4bit_send_command+0x72>
    }
    else{
        /* R/W Pin connected to the GND -> Logic (0) "Hard Wired" */
        /* Write Logic (0) to the "Register Select" Pin to select the "Instruction Register"  */
    	//delay_ms(1);
    	gpio_pin_write_logic(&(lcd->lcd_rs), GPIO_LOW);
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	2100      	movs	r1, #0
 800034c:	4618      	mov	r0, r3
 800034e:	f000 faa2 	bl	8000896 <gpio_pin_write_logic>
        /* Send the Command through the (4-Pins" Data lines */

        ret = lcd_send_4bits(lcd, (command >> 4));
 8000352:	78fb      	ldrb	r3, [r7, #3]
 8000354:	091b      	lsrs	r3, r3, #4
 8000356:	b2db      	uxtb	r3, r3
 8000358:	4619      	mov	r1, r3
 800035a:	6878      	ldr	r0, [r7, #4]
 800035c:	f000 f876 	bl	800044c <lcd_send_4bits>
 8000360:	4603      	mov	r3, r0
 8000362:	73fb      	strb	r3, [r7, #15]
        /* Send the Enable Signal on the "E" Pin */
        delay_ms(1);
 8000364:	2001      	movs	r0, #1
 8000366:	f000 fabf 	bl	80008e8 <delay_ms>
        ret = lcd_4bit_send_enable_signal(lcd);
 800036a:	6878      	ldr	r0, [r7, #4]
 800036c:	f000 f8ad 	bl	80004ca <lcd_4bit_send_enable_signal>
 8000370:	4603      	mov	r3, r0
 8000372:	73fb      	strb	r3, [r7, #15]
        /* Send the Command through the (4-Pins" Data lines */
        delay_ms(2);
 8000374:	2002      	movs	r0, #2
 8000376:	f000 fab7 	bl	80008e8 <delay_ms>
        ret = lcd_send_4bits(lcd, command );
 800037a:	78fb      	ldrb	r3, [r7, #3]
 800037c:	4619      	mov	r1, r3
 800037e:	6878      	ldr	r0, [r7, #4]
 8000380:	f000 f864 	bl	800044c <lcd_send_4bits>
 8000384:	4603      	mov	r3, r0
 8000386:	73fb      	strb	r3, [r7, #15]
        /* Send the Enable Signal on the "E" Pin */
        delay_ms(1);
 8000388:	2001      	movs	r0, #1
 800038a:	f000 faad 	bl	80008e8 <delay_ms>
        ret = lcd_4bit_send_enable_signal(lcd);
 800038e:	6878      	ldr	r0, [r7, #4]
 8000390:	f000 f89b 	bl	80004ca <lcd_4bit_send_enable_signal>
 8000394:	4603      	mov	r3, r0
 8000396:	73fb      	strb	r3, [r7, #15]
        delay_ms(2);
 8000398:	2002      	movs	r0, #2
 800039a:	f000 faa5 	bl	80008e8 <delay_ms>



    }
    return ret;
 800039e:	7bfb      	ldrb	r3, [r7, #15]
}
 80003a0:	4618      	mov	r0, r3
 80003a2:	3710      	adds	r7, #16
 80003a4:	46bd      	mov	sp, r7
 80003a6:	bd80      	pop	{r7, pc}

080003a8 <lcd_4bit_send_char_data>:
 * @param data The data that we need to send to the LCD
 * @return Status of the function
 *          (E_OK) : The function done successfully
 *          (E_NOT_OK) : The function has issue to perform this action
 */
Std_ReturnType lcd_4bit_send_char_data(const chr_lcd_4bit_t *lcd, uint8 data){
 80003a8:	b580      	push	{r7, lr}
 80003aa:	b084      	sub	sp, #16
 80003ac:	af00      	add	r7, sp, #0
 80003ae:	6078      	str	r0, [r7, #4]
 80003b0:	460b      	mov	r3, r1
 80003b2:	70fb      	strb	r3, [r7, #3]
    Std_ReturnType ret = E_OK;
 80003b4:	2301      	movs	r3, #1
 80003b6:	73fb      	strb	r3, [r7, #15]
    if(NULL == lcd){
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d102      	bne.n	80003c4 <lcd_4bit_send_char_data+0x1c>
        ret = E_NOT_OK;
 80003be:	2300      	movs	r3, #0
 80003c0:	73fb      	strb	r3, [r7, #15]
 80003c2:	e01e      	b.n	8000402 <lcd_4bit_send_char_data+0x5a>
    }
    else{
        /* R/W Pin connected to the GND -> Logic (0) "Hard Wired" */
        /* Write Logic (1) to the "Register Select" Pin to select the "Data Register"  */
         gpio_pin_write_logic(&(lcd->lcd_rs), GPIO_HIGH);
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	2101      	movs	r1, #1
 80003c8:	4618      	mov	r0, r3
 80003ca:	f000 fa64 	bl	8000896 <gpio_pin_write_logic>
        /* Send the Data through the (4-Pins" Data lines */
        ret = lcd_send_4bits(lcd, data >> 4);
 80003ce:	78fb      	ldrb	r3, [r7, #3]
 80003d0:	091b      	lsrs	r3, r3, #4
 80003d2:	b2db      	uxtb	r3, r3
 80003d4:	4619      	mov	r1, r3
 80003d6:	6878      	ldr	r0, [r7, #4]
 80003d8:	f000 f838 	bl	800044c <lcd_send_4bits>
 80003dc:	4603      	mov	r3, r0
 80003de:	73fb      	strb	r3, [r7, #15]

        /* Send the Enable Signal on the "E" Pin */
        ret = lcd_4bit_send_enable_signal(lcd);
 80003e0:	6878      	ldr	r0, [r7, #4]
 80003e2:	f000 f872 	bl	80004ca <lcd_4bit_send_enable_signal>
 80003e6:	4603      	mov	r3, r0
 80003e8:	73fb      	strb	r3, [r7, #15]

        /* Send the Data through the (4-Pins" Data lines */
        ret = lcd_send_4bits(lcd, data);
 80003ea:	78fb      	ldrb	r3, [r7, #3]
 80003ec:	4619      	mov	r1, r3
 80003ee:	6878      	ldr	r0, [r7, #4]
 80003f0:	f000 f82c 	bl	800044c <lcd_send_4bits>
 80003f4:	4603      	mov	r3, r0
 80003f6:	73fb      	strb	r3, [r7, #15]

        /* Send the Enable Signal on the "E" Pin */
        ret = lcd_4bit_send_enable_signal(lcd);
 80003f8:	6878      	ldr	r0, [r7, #4]
 80003fa:	f000 f866 	bl	80004ca <lcd_4bit_send_enable_signal>
 80003fe:	4603      	mov	r3, r0
 8000400:	73fb      	strb	r3, [r7, #15]

    }
    return ret;
 8000402:	7bfb      	ldrb	r3, [r7, #15]
}
 8000404:	4618      	mov	r0, r3
 8000406:	3710      	adds	r7, #16
 8000408:	46bd      	mov	sp, r7
 800040a:	bd80      	pop	{r7, pc}

0800040c <lcd_4bit_send_string>:
 * @param str
 * @return Status of the function
 *          (E_OK) : The function done successfully
 *          (E_NOT_OK) : The function has issue to perform this action
 */
Std_ReturnType lcd_4bit_send_string(const chr_lcd_4bit_t *lcd, uint8 *str){
 800040c:	b580      	push	{r7, lr}
 800040e:	b084      	sub	sp, #16
 8000410:	af00      	add	r7, sp, #0
 8000412:	6078      	str	r0, [r7, #4]
 8000414:	6039      	str	r1, [r7, #0]
    Std_ReturnType ret = E_OK;
 8000416:	2301      	movs	r3, #1
 8000418:	73fb      	strb	r3, [r7, #15]
    if(NULL == lcd){
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	2b00      	cmp	r3, #0
 800041e:	d10c      	bne.n	800043a <lcd_4bit_send_string+0x2e>
        ret = E_NOT_OK;
 8000420:	2300      	movs	r3, #0
 8000422:	73fb      	strb	r3, [r7, #15]
 8000424:	e00d      	b.n	8000442 <lcd_4bit_send_string+0x36>
    }
    else{
        while(*str){
            ret = lcd_4bit_send_char_data(lcd, *str++);
 8000426:	683b      	ldr	r3, [r7, #0]
 8000428:	1c5a      	adds	r2, r3, #1
 800042a:	603a      	str	r2, [r7, #0]
 800042c:	781b      	ldrb	r3, [r3, #0]
 800042e:	4619      	mov	r1, r3
 8000430:	6878      	ldr	r0, [r7, #4]
 8000432:	f7ff ffb9 	bl	80003a8 <lcd_4bit_send_char_data>
 8000436:	4603      	mov	r3, r0
 8000438:	73fb      	strb	r3, [r7, #15]
        while(*str){
 800043a:	683b      	ldr	r3, [r7, #0]
 800043c:	781b      	ldrb	r3, [r3, #0]
 800043e:	2b00      	cmp	r3, #0
 8000440:	d1f1      	bne.n	8000426 <lcd_4bit_send_string+0x1a>
        }
    }
    return ret;
 8000442:	7bfb      	ldrb	r3, [r7, #15]
}
 8000444:	4618      	mov	r0, r3
 8000446:	3710      	adds	r7, #16
 8000448:	46bd      	mov	sp, r7
 800044a:	bd80      	pop	{r7, pc}

0800044c <lcd_send_4bits>:
 * @param _data_command
 * @return Status of the function
 *          (E_OK) : The function done successfully
 *          (E_NOT_OK) : The function has issue to perform this action
 */
static Std_ReturnType lcd_send_4bits(const chr_lcd_4bit_t *lcd, uint8 _data_command){
 800044c:	b580      	push	{r7, lr}
 800044e:	b084      	sub	sp, #16
 8000450:	af00      	add	r7, sp, #0
 8000452:	6078      	str	r0, [r7, #4]
 8000454:	460b      	mov	r3, r1
 8000456:	70fb      	strb	r3, [r7, #3]
    Std_ReturnType ret = E_OK;
 8000458:	2301      	movs	r3, #1
 800045a:	73fb      	strb	r3, [r7, #15]
     gpio_pin_write_logic(&(lcd->lcd_data[0]), (_data_command >> 0) & (uint8)0x01);
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	f103 0210 	add.w	r2, r3, #16
 8000462:	78fb      	ldrb	r3, [r7, #3]
 8000464:	f003 0301 	and.w	r3, r3, #1
 8000468:	b2db      	uxtb	r3, r3
 800046a:	4619      	mov	r1, r3
 800046c:	4610      	mov	r0, r2
 800046e:	f000 fa12 	bl	8000896 <gpio_pin_write_logic>
     gpio_pin_write_logic(&(lcd->lcd_data[1]), (_data_command >> 1) & (uint8)0x01);
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	f103 0218 	add.w	r2, r3, #24
 8000478:	78fb      	ldrb	r3, [r7, #3]
 800047a:	085b      	lsrs	r3, r3, #1
 800047c:	b2db      	uxtb	r3, r3
 800047e:	f003 0301 	and.w	r3, r3, #1
 8000482:	b2db      	uxtb	r3, r3
 8000484:	4619      	mov	r1, r3
 8000486:	4610      	mov	r0, r2
 8000488:	f000 fa05 	bl	8000896 <gpio_pin_write_logic>
     gpio_pin_write_logic(&(lcd->lcd_data[2]), (_data_command >> 2) & (uint8)0x01);
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	f103 0220 	add.w	r2, r3, #32
 8000492:	78fb      	ldrb	r3, [r7, #3]
 8000494:	089b      	lsrs	r3, r3, #2
 8000496:	b2db      	uxtb	r3, r3
 8000498:	f003 0301 	and.w	r3, r3, #1
 800049c:	b2db      	uxtb	r3, r3
 800049e:	4619      	mov	r1, r3
 80004a0:	4610      	mov	r0, r2
 80004a2:	f000 f9f8 	bl	8000896 <gpio_pin_write_logic>
     gpio_pin_write_logic(&(lcd->lcd_data[3]), (_data_command >> 3) & (uint8)0x01);
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	f103 0228 	add.w	r2, r3, #40	; 0x28
 80004ac:	78fb      	ldrb	r3, [r7, #3]
 80004ae:	08db      	lsrs	r3, r3, #3
 80004b0:	b2db      	uxtb	r3, r3
 80004b2:	f003 0301 	and.w	r3, r3, #1
 80004b6:	b2db      	uxtb	r3, r3
 80004b8:	4619      	mov	r1, r3
 80004ba:	4610      	mov	r0, r2
 80004bc:	f000 f9eb 	bl	8000896 <gpio_pin_write_logic>
     //delay_ms(1);
    return ret;
 80004c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80004c2:	4618      	mov	r0, r3
 80004c4:	3710      	adds	r7, #16
 80004c6:	46bd      	mov	sp, r7
 80004c8:	bd80      	pop	{r7, pc}

080004ca <lcd_4bit_send_enable_signal>:
 * @param lcd
 * @return Status of the function
 *          (E_OK) : The function done successfully
 *          (E_NOT_OK) : The function has issue to perform this action
 */
static Std_ReturnType lcd_4bit_send_enable_signal(const chr_lcd_4bit_t *lcd){
 80004ca:	b580      	push	{r7, lr}
 80004cc:	b084      	sub	sp, #16
 80004ce:	af00      	add	r7, sp, #0
 80004d0:	6078      	str	r0, [r7, #4]
    Std_ReturnType ret = E_OK;
 80004d2:	2301      	movs	r3, #1
 80004d4:	73fb      	strb	r3, [r7, #15]
    gpio_pin_write_logic(&(lcd->lcd_en), GPIO_HIGH);
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	3308      	adds	r3, #8
 80004da:	2101      	movs	r1, #1
 80004dc:	4618      	mov	r0, r3
 80004de:	f000 f9da 	bl	8000896 <gpio_pin_write_logic>
    delay_ms(1);
 80004e2:	2001      	movs	r0, #1
 80004e4:	f000 fa00 	bl	80008e8 <delay_ms>
     gpio_pin_write_logic(&(lcd->lcd_en), GPIO_LOW);
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	3308      	adds	r3, #8
 80004ec:	2100      	movs	r1, #0
 80004ee:	4618      	mov	r0, r3
 80004f0:	f000 f9d1 	bl	8000896 <gpio_pin_write_logic>


    return ret;
 80004f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80004f6:	4618      	mov	r0, r3
 80004f8:	3710      	adds	r7, #16
 80004fa:	46bd      	mov	sp, r7
 80004fc:	bd80      	pop	{r7, pc}
	...

08000500 <EXTI0_IRQHandler>:
///**===========			ISR  Functions        =========================
///**================================================================
// */

void EXTI0_IRQHandler (void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	af00      	add	r7, sp, #0
	//cleared by writing a ‘1’ into the bit Pending register (EXTI_PR)
	EXTI->PR |= 1<<0 ;
 8000504:	4b05      	ldr	r3, [pc, #20]	; (800051c <EXTI0_IRQHandler+0x1c>)
 8000506:	695b      	ldr	r3, [r3, #20]
 8000508:	4a04      	ldr	r2, [pc, #16]	; (800051c <EXTI0_IRQHandler+0x1c>)
 800050a:	f043 0301 	orr.w	r3, r3, #1
 800050e:	6153      	str	r3, [r2, #20]
	//CALL IRQ_CALL
	GP_IRQ_CallBack[0]() ;
 8000510:	4b03      	ldr	r3, [pc, #12]	; (8000520 <EXTI0_IRQHandler+0x20>)
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	4798      	blx	r3
}
 8000516:	bf00      	nop
 8000518:	bd80      	pop	{r7, pc}
 800051a:	bf00      	nop
 800051c:	40010400 	.word	0x40010400
 8000520:	20000170 	.word	0x20000170

08000524 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler (void) {
 8000524:	b580      	push	{r7, lr}
 8000526:	af00      	add	r7, sp, #0
	EXTI->PR |=  (1<<1) ;
 8000528:	4b05      	ldr	r3, [pc, #20]	; (8000540 <EXTI1_IRQHandler+0x1c>)
 800052a:	695b      	ldr	r3, [r3, #20]
 800052c:	4a04      	ldr	r2, [pc, #16]	; (8000540 <EXTI1_IRQHandler+0x1c>)
 800052e:	f043 0302 	orr.w	r3, r3, #2
 8000532:	6153      	str	r3, [r2, #20]

	GP_IRQ_CallBack[1]() ; }
 8000534:	4b03      	ldr	r3, [pc, #12]	; (8000544 <EXTI1_IRQHandler+0x20>)
 8000536:	685b      	ldr	r3, [r3, #4]
 8000538:	4798      	blx	r3
 800053a:	bf00      	nop
 800053c:	bd80      	pop	{r7, pc}
 800053e:	bf00      	nop
 8000540:	40010400 	.word	0x40010400
 8000544:	20000170 	.word	0x20000170

08000548 <EXTI2_IRQHandler>:


void EXTI2_IRQHandler (void) {
 8000548:	b580      	push	{r7, lr}
 800054a:	af00      	add	r7, sp, #0
	EXTI->PR |=  (1<<2) ;
 800054c:	4b05      	ldr	r3, [pc, #20]	; (8000564 <EXTI2_IRQHandler+0x1c>)
 800054e:	695b      	ldr	r3, [r3, #20]
 8000550:	4a04      	ldr	r2, [pc, #16]	; (8000564 <EXTI2_IRQHandler+0x1c>)
 8000552:	f043 0304 	orr.w	r3, r3, #4
 8000556:	6153      	str	r3, [r2, #20]

	GP_IRQ_CallBack[2]() ; }
 8000558:	4b03      	ldr	r3, [pc, #12]	; (8000568 <EXTI2_IRQHandler+0x20>)
 800055a:	689b      	ldr	r3, [r3, #8]
 800055c:	4798      	blx	r3
 800055e:	bf00      	nop
 8000560:	bd80      	pop	{r7, pc}
 8000562:	bf00      	nop
 8000564:	40010400 	.word	0x40010400
 8000568:	20000170 	.word	0x20000170

0800056c <EXTI3_IRQHandler>:


void EXTI3_IRQHandler (void) {
 800056c:	b580      	push	{r7, lr}
 800056e:	af00      	add	r7, sp, #0
	EXTI->PR |=  (1<<3) ;
 8000570:	4b05      	ldr	r3, [pc, #20]	; (8000588 <EXTI3_IRQHandler+0x1c>)
 8000572:	695b      	ldr	r3, [r3, #20]
 8000574:	4a04      	ldr	r2, [pc, #16]	; (8000588 <EXTI3_IRQHandler+0x1c>)
 8000576:	f043 0308 	orr.w	r3, r3, #8
 800057a:	6153      	str	r3, [r2, #20]

	GP_IRQ_CallBack[3]() ; }
 800057c:	4b03      	ldr	r3, [pc, #12]	; (800058c <EXTI3_IRQHandler+0x20>)
 800057e:	68db      	ldr	r3, [r3, #12]
 8000580:	4798      	blx	r3
 8000582:	bf00      	nop
 8000584:	bd80      	pop	{r7, pc}
 8000586:	bf00      	nop
 8000588:	40010400 	.word	0x40010400
 800058c:	20000170 	.word	0x20000170

08000590 <EXTI4_IRQHandler>:


void EXTI4_IRQHandler (void) {
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0
	EXTI->PR |=  (1<<4) ;
 8000594:	4b05      	ldr	r3, [pc, #20]	; (80005ac <EXTI4_IRQHandler+0x1c>)
 8000596:	695b      	ldr	r3, [r3, #20]
 8000598:	4a04      	ldr	r2, [pc, #16]	; (80005ac <EXTI4_IRQHandler+0x1c>)
 800059a:	f043 0310 	orr.w	r3, r3, #16
 800059e:	6153      	str	r3, [r2, #20]
	GP_IRQ_CallBack[4]() ; }
 80005a0:	4b03      	ldr	r3, [pc, #12]	; (80005b0 <EXTI4_IRQHandler+0x20>)
 80005a2:	691b      	ldr	r3, [r3, #16]
 80005a4:	4798      	blx	r3
 80005a6:	bf00      	nop
 80005a8:	bd80      	pop	{r7, pc}
 80005aa:	bf00      	nop
 80005ac:	40010400 	.word	0x40010400
 80005b0:	20000170 	.word	0x20000170

080005b4 <EXTI9_5_IRQHandler>:


void EXTI9_5_IRQHandler (void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0
	if (EXTI->PR & 1<<5 ) {	EXTI->PR |=  (1<<5)    ; GP_IRQ_CallBack[5]() ;   }
 80005b8:	4b26      	ldr	r3, [pc, #152]	; (8000654 <EXTI9_5_IRQHandler+0xa0>)
 80005ba:	695b      	ldr	r3, [r3, #20]
 80005bc:	f003 0320 	and.w	r3, r3, #32
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d008      	beq.n	80005d6 <EXTI9_5_IRQHandler+0x22>
 80005c4:	4b23      	ldr	r3, [pc, #140]	; (8000654 <EXTI9_5_IRQHandler+0xa0>)
 80005c6:	695b      	ldr	r3, [r3, #20]
 80005c8:	4a22      	ldr	r2, [pc, #136]	; (8000654 <EXTI9_5_IRQHandler+0xa0>)
 80005ca:	f043 0320 	orr.w	r3, r3, #32
 80005ce:	6153      	str	r3, [r2, #20]
 80005d0:	4b21      	ldr	r3, [pc, #132]	; (8000658 <EXTI9_5_IRQHandler+0xa4>)
 80005d2:	695b      	ldr	r3, [r3, #20]
 80005d4:	4798      	blx	r3
	if (EXTI->PR & 1<<6 ) {	EXTI->PR |=  (1<<6)    ; GP_IRQ_CallBack[6]() ;   }
 80005d6:	4b1f      	ldr	r3, [pc, #124]	; (8000654 <EXTI9_5_IRQHandler+0xa0>)
 80005d8:	695b      	ldr	r3, [r3, #20]
 80005da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d008      	beq.n	80005f4 <EXTI9_5_IRQHandler+0x40>
 80005e2:	4b1c      	ldr	r3, [pc, #112]	; (8000654 <EXTI9_5_IRQHandler+0xa0>)
 80005e4:	695b      	ldr	r3, [r3, #20]
 80005e6:	4a1b      	ldr	r2, [pc, #108]	; (8000654 <EXTI9_5_IRQHandler+0xa0>)
 80005e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80005ec:	6153      	str	r3, [r2, #20]
 80005ee:	4b1a      	ldr	r3, [pc, #104]	; (8000658 <EXTI9_5_IRQHandler+0xa4>)
 80005f0:	699b      	ldr	r3, [r3, #24]
 80005f2:	4798      	blx	r3
	if (EXTI->PR & 1<<7 ) {	EXTI->PR |=  (1<<7)    ; GP_IRQ_CallBack[7]() ;   }
 80005f4:	4b17      	ldr	r3, [pc, #92]	; (8000654 <EXTI9_5_IRQHandler+0xa0>)
 80005f6:	695b      	ldr	r3, [r3, #20]
 80005f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d008      	beq.n	8000612 <EXTI9_5_IRQHandler+0x5e>
 8000600:	4b14      	ldr	r3, [pc, #80]	; (8000654 <EXTI9_5_IRQHandler+0xa0>)
 8000602:	695b      	ldr	r3, [r3, #20]
 8000604:	4a13      	ldr	r2, [pc, #76]	; (8000654 <EXTI9_5_IRQHandler+0xa0>)
 8000606:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800060a:	6153      	str	r3, [r2, #20]
 800060c:	4b12      	ldr	r3, [pc, #72]	; (8000658 <EXTI9_5_IRQHandler+0xa4>)
 800060e:	69db      	ldr	r3, [r3, #28]
 8000610:	4798      	blx	r3
	if (EXTI->PR & 1<<8 ) {	EXTI->PR |=  (1<<8)    ; GP_IRQ_CallBack[8]() ;   }
 8000612:	4b10      	ldr	r3, [pc, #64]	; (8000654 <EXTI9_5_IRQHandler+0xa0>)
 8000614:	695b      	ldr	r3, [r3, #20]
 8000616:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800061a:	2b00      	cmp	r3, #0
 800061c:	d008      	beq.n	8000630 <EXTI9_5_IRQHandler+0x7c>
 800061e:	4b0d      	ldr	r3, [pc, #52]	; (8000654 <EXTI9_5_IRQHandler+0xa0>)
 8000620:	695b      	ldr	r3, [r3, #20]
 8000622:	4a0c      	ldr	r2, [pc, #48]	; (8000654 <EXTI9_5_IRQHandler+0xa0>)
 8000624:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000628:	6153      	str	r3, [r2, #20]
 800062a:	4b0b      	ldr	r3, [pc, #44]	; (8000658 <EXTI9_5_IRQHandler+0xa4>)
 800062c:	6a1b      	ldr	r3, [r3, #32]
 800062e:	4798      	blx	r3
	if (EXTI->PR & 1<<9 ) {	EXTI->PR |=  (1<<9)    ; GP_IRQ_CallBack[9]() ;   }
 8000630:	4b08      	ldr	r3, [pc, #32]	; (8000654 <EXTI9_5_IRQHandler+0xa0>)
 8000632:	695b      	ldr	r3, [r3, #20]
 8000634:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000638:	2b00      	cmp	r3, #0
 800063a:	d008      	beq.n	800064e <EXTI9_5_IRQHandler+0x9a>
 800063c:	4b05      	ldr	r3, [pc, #20]	; (8000654 <EXTI9_5_IRQHandler+0xa0>)
 800063e:	695b      	ldr	r3, [r3, #20]
 8000640:	4a04      	ldr	r2, [pc, #16]	; (8000654 <EXTI9_5_IRQHandler+0xa0>)
 8000642:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000646:	6153      	str	r3, [r2, #20]
 8000648:	4b03      	ldr	r3, [pc, #12]	; (8000658 <EXTI9_5_IRQHandler+0xa4>)
 800064a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800064c:	4798      	blx	r3

}
 800064e:	bf00      	nop
 8000650:	bd80      	pop	{r7, pc}
 8000652:	bf00      	nop
 8000654:	40010400 	.word	0x40010400
 8000658:	20000170 	.word	0x20000170

0800065c <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler (void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	af00      	add	r7, sp, #0
	if (EXTI->PR & 1<<10 ) {	EXTI->PR |=  (1<<10)    ; GP_IRQ_CallBack[10]() ;   }
 8000660:	4b2d      	ldr	r3, [pc, #180]	; (8000718 <EXTI15_10_IRQHandler+0xbc>)
 8000662:	695b      	ldr	r3, [r3, #20]
 8000664:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000668:	2b00      	cmp	r3, #0
 800066a:	d008      	beq.n	800067e <EXTI15_10_IRQHandler+0x22>
 800066c:	4b2a      	ldr	r3, [pc, #168]	; (8000718 <EXTI15_10_IRQHandler+0xbc>)
 800066e:	695b      	ldr	r3, [r3, #20]
 8000670:	4a29      	ldr	r2, [pc, #164]	; (8000718 <EXTI15_10_IRQHandler+0xbc>)
 8000672:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000676:	6153      	str	r3, [r2, #20]
 8000678:	4b28      	ldr	r3, [pc, #160]	; (800071c <EXTI15_10_IRQHandler+0xc0>)
 800067a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800067c:	4798      	blx	r3
	if (EXTI->PR & 1<<11 ) {	EXTI->PR |=  (1<<11)    ; GP_IRQ_CallBack[11]() ;   }
 800067e:	4b26      	ldr	r3, [pc, #152]	; (8000718 <EXTI15_10_IRQHandler+0xbc>)
 8000680:	695b      	ldr	r3, [r3, #20]
 8000682:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000686:	2b00      	cmp	r3, #0
 8000688:	d008      	beq.n	800069c <EXTI15_10_IRQHandler+0x40>
 800068a:	4b23      	ldr	r3, [pc, #140]	; (8000718 <EXTI15_10_IRQHandler+0xbc>)
 800068c:	695b      	ldr	r3, [r3, #20]
 800068e:	4a22      	ldr	r2, [pc, #136]	; (8000718 <EXTI15_10_IRQHandler+0xbc>)
 8000690:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000694:	6153      	str	r3, [r2, #20]
 8000696:	4b21      	ldr	r3, [pc, #132]	; (800071c <EXTI15_10_IRQHandler+0xc0>)
 8000698:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800069a:	4798      	blx	r3
	if (EXTI->PR & 1<<12 ) {	EXTI->PR |=  (1<<12)    ; GP_IRQ_CallBack[12]() ;   }
 800069c:	4b1e      	ldr	r3, [pc, #120]	; (8000718 <EXTI15_10_IRQHandler+0xbc>)
 800069e:	695b      	ldr	r3, [r3, #20]
 80006a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d008      	beq.n	80006ba <EXTI15_10_IRQHandler+0x5e>
 80006a8:	4b1b      	ldr	r3, [pc, #108]	; (8000718 <EXTI15_10_IRQHandler+0xbc>)
 80006aa:	695b      	ldr	r3, [r3, #20]
 80006ac:	4a1a      	ldr	r2, [pc, #104]	; (8000718 <EXTI15_10_IRQHandler+0xbc>)
 80006ae:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80006b2:	6153      	str	r3, [r2, #20]
 80006b4:	4b19      	ldr	r3, [pc, #100]	; (800071c <EXTI15_10_IRQHandler+0xc0>)
 80006b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b8:	4798      	blx	r3
	if (EXTI->PR & 1<<13 ) {	EXTI->PR |=  (1<<13)    ; GP_IRQ_CallBack[13]() ;   }
 80006ba:	4b17      	ldr	r3, [pc, #92]	; (8000718 <EXTI15_10_IRQHandler+0xbc>)
 80006bc:	695b      	ldr	r3, [r3, #20]
 80006be:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d008      	beq.n	80006d8 <EXTI15_10_IRQHandler+0x7c>
 80006c6:	4b14      	ldr	r3, [pc, #80]	; (8000718 <EXTI15_10_IRQHandler+0xbc>)
 80006c8:	695b      	ldr	r3, [r3, #20]
 80006ca:	4a13      	ldr	r2, [pc, #76]	; (8000718 <EXTI15_10_IRQHandler+0xbc>)
 80006cc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80006d0:	6153      	str	r3, [r2, #20]
 80006d2:	4b12      	ldr	r3, [pc, #72]	; (800071c <EXTI15_10_IRQHandler+0xc0>)
 80006d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80006d6:	4798      	blx	r3
	if (EXTI->PR & 1<<14 ) {	EXTI->PR |=  (1<<14)    ; GP_IRQ_CallBack[14]() ;   }
 80006d8:	4b0f      	ldr	r3, [pc, #60]	; (8000718 <EXTI15_10_IRQHandler+0xbc>)
 80006da:	695b      	ldr	r3, [r3, #20]
 80006dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d008      	beq.n	80006f6 <EXTI15_10_IRQHandler+0x9a>
 80006e4:	4b0c      	ldr	r3, [pc, #48]	; (8000718 <EXTI15_10_IRQHandler+0xbc>)
 80006e6:	695b      	ldr	r3, [r3, #20]
 80006e8:	4a0b      	ldr	r2, [pc, #44]	; (8000718 <EXTI15_10_IRQHandler+0xbc>)
 80006ea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006ee:	6153      	str	r3, [r2, #20]
 80006f0:	4b0a      	ldr	r3, [pc, #40]	; (800071c <EXTI15_10_IRQHandler+0xc0>)
 80006f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80006f4:	4798      	blx	r3
	if (EXTI->PR & 1<<15 ) {	EXTI->PR |=  (1<<15)    ; GP_IRQ_CallBack[15]() ;   }
 80006f6:	4b08      	ldr	r3, [pc, #32]	; (8000718 <EXTI15_10_IRQHandler+0xbc>)
 80006f8:	695b      	ldr	r3, [r3, #20]
 80006fa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d008      	beq.n	8000714 <EXTI15_10_IRQHandler+0xb8>
 8000702:	4b05      	ldr	r3, [pc, #20]	; (8000718 <EXTI15_10_IRQHandler+0xbc>)
 8000704:	695b      	ldr	r3, [r3, #20]
 8000706:	4a04      	ldr	r2, [pc, #16]	; (8000718 <EXTI15_10_IRQHandler+0xbc>)
 8000708:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800070c:	6153      	str	r3, [r2, #20]
 800070e:	4b03      	ldr	r3, [pc, #12]	; (800071c <EXTI15_10_IRQHandler+0xc0>)
 8000710:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000712:	4798      	blx	r3

}
 8000714:	bf00      	nop
 8000716:	bd80      	pop	{r7, pc}
 8000718:	40010400 	.word	0x40010400
 800071c:	20000170 	.word	0x20000170

08000720 <Get_CRL_Position>:
 * =======================================================================================
 * 							Generic Functions
 * =======================================================================================
 */
uint8_t Get_CRL_Position(GPIO_Pin_Num PinNumber)
{
 8000720:	b480      	push	{r7}
 8000722:	b083      	sub	sp, #12
 8000724:	af00      	add	r7, sp, #0
 8000726:	4603      	mov	r3, r0
 8000728:	71fb      	strb	r3, [r7, #7]
	if (PinNumber > 7) PinNumber -=8 ;
 800072a:	79fb      	ldrb	r3, [r7, #7]
 800072c:	2b07      	cmp	r3, #7
 800072e:	d902      	bls.n	8000736 <Get_CRL_Position+0x16>
 8000730:	79fb      	ldrb	r3, [r7, #7]
 8000732:	3b08      	subs	r3, #8
 8000734:	71fb      	strb	r3, [r7, #7]

	return (PinNumber * 4);
 8000736:	79fb      	ldrb	r3, [r7, #7]
 8000738:	009b      	lsls	r3, r3, #2
 800073a:	b2db      	uxtb	r3, r3

}
 800073c:	4618      	mov	r0, r3
 800073e:	370c      	adds	r7, #12
 8000740:	46bd      	mov	sp, r7
 8000742:	bc80      	pop	{r7}
 8000744:	4770      	bx	lr
	...

08000748 <gpio_pin_intialize>:
 * @retval 			-none
 * Note				-Stm32F103C6 MCU has GPIO A,B,C,D,E Modules
 * 					 But LQFP48 Package has only GPIO A,B,PART of C/D exported as external PINS from the MCU
 */
void gpio_pin_intialize(GPIO_PinConfig_t* PinConfig)
{
 8000748:	b590      	push	{r4, r7, lr}
 800074a:	b085      	sub	sp, #20
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]


	volatile uint32_t* configregister = NULL ;
 8000750:	2300      	movs	r3, #0
 8000752:	60fb      	str	r3, [r7, #12]
	volatile uint32_t conf =0;
 8000754:	2300      	movs	r3, #0
 8000756:	60bb      	str	r3, [r7, #8]

	configregister = (PinConfig->GPIO_PinNumber < GPIO_PIN_8) ? &(PinConfig->GPIO_Port->CRL)  : &(PinConfig->GPIO_Port->CRH);
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	791b      	ldrb	r3, [r3, #4]
 800075c:	2b07      	cmp	r3, #7
 800075e:	d802      	bhi.n	8000766 <gpio_pin_intialize+0x1e>
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	e002      	b.n	800076c <gpio_pin_intialize+0x24>
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	3304      	adds	r3, #4
 800076c:	60fb      	str	r3, [r7, #12]

	//CNF0[1:0] MODE0[1:0=]   Clear the four Bits
	(*configregister) &= ~(0xf << Get_CRL_Position(PinConfig->GPIO_PinNumber) );
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	791b      	ldrb	r3, [r3, #4]
 8000772:	4618      	mov	r0, r3
 8000774:	f7ff ffd4 	bl	8000720 <Get_CRL_Position>
 8000778:	4603      	mov	r3, r0
 800077a:	461a      	mov	r2, r3
 800077c:	230f      	movs	r3, #15
 800077e:	4093      	lsls	r3, r2
 8000780:	43da      	mvns	r2, r3
 8000782:	68fb      	ldr	r3, [r7, #12]
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	401a      	ands	r2, r3
 8000788:	68fb      	ldr	r3, [r7, #12]
 800078a:	601a      	str	r2, [r3, #0]

	switch (PinConfig->GPIO_MODE) {
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	795b      	ldrb	r3, [r3, #5]
 8000790:	2b08      	cmp	r3, #8
 8000792:	d85a      	bhi.n	800084a <gpio_pin_intialize+0x102>
 8000794:	a201      	add	r2, pc, #4	; (adr r2, 800079c <gpio_pin_intialize+0x54>)
 8000796:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800079a:	bf00      	nop
 800079c:	080007c1 	.word	0x080007c1
 80007a0:	080007c7 	.word	0x080007c7
 80007a4:	080007cd 	.word	0x080007cd
 80007a8:	080007e7 	.word	0x080007e7
 80007ac:	08000803 	.word	0x08000803
 80007b0:	0800080f 	.word	0x0800080f
 80007b4:	08000821 	.word	0x08000821
 80007b8:	08000833 	.word	0x08000833
 80007bc:	08000845 	.word	0x08000845
	case GPIO_ANALOG_MODE:
		conf = 0b0000 &0x0F;
 80007c0:	2300      	movs	r3, #0
 80007c2:	60bb      	str	r3, [r7, #8]
		break;
 80007c4:	e042      	b.n	800084c <gpio_pin_intialize+0x104>
	case GPIO_FLOATING_INPUT_MODE:
		conf = 0b0100 &0x0F;
 80007c6:	2304      	movs	r3, #4
 80007c8:	60bb      	str	r3, [r7, #8]
		break;
 80007ca:	e03f      	b.n	800084c <gpio_pin_intialize+0x104>
	case GPIO_INPUT_PULLUP_MODE:
		conf = 0b1000 &0x0F;
 80007cc:	2308      	movs	r3, #8
 80007ce:	60bb      	str	r3, [r7, #8]
		PinConfig->GPIO_Port->ODR |=PinConfig->GPIO_PinNumber ;
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	68da      	ldr	r2, [r3, #12]
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	791b      	ldrb	r3, [r3, #4]
 80007da:	4619      	mov	r1, r3
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	430a      	orrs	r2, r1
 80007e2:	60da      	str	r2, [r3, #12]
		break;
 80007e4:	e032      	b.n	800084c <gpio_pin_intialize+0x104>
	case GPIO_INPUT_PULLDOWN_MODE:
		conf = 0b1000 &0x0F;
 80007e6:	2308      	movs	r3, #8
 80007e8:	60bb      	str	r3, [r7, #8]
		PinConfig->GPIO_Port->ODR &= ~(PinConfig->GPIO_PinNumber) ;
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	68da      	ldr	r2, [r3, #12]
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	791b      	ldrb	r3, [r3, #4]
 80007f4:	43db      	mvns	r3, r3
 80007f6:	4619      	mov	r1, r3
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	400a      	ands	r2, r1
 80007fe:	60da      	str	r2, [r3, #12]
		break;
 8000800:	e024      	b.n	800084c <gpio_pin_intialize+0x104>
	case GPIO_OUTPUT_PUSHPULL_MODE:
		conf = (((0b00<<2)| (PinConfig->GPIO_Output_Speed ))&0x0F);
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	799b      	ldrb	r3, [r3, #6]
 8000806:	f003 030f 	and.w	r3, r3, #15
 800080a:	60bb      	str	r3, [r7, #8]
		break;
 800080c:	e01e      	b.n	800084c <gpio_pin_intialize+0x104>
	case GPIO_OUTPUT_OPENDRAIN_MODE:
		conf = (((0b01<<2)| (PinConfig->GPIO_Output_Speed ))&0x0F);
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	799b      	ldrb	r3, [r3, #6]
 8000812:	f043 0304 	orr.w	r3, r3, #4
 8000816:	b2db      	uxtb	r3, r3
 8000818:	f003 030f 	and.w	r3, r3, #15
 800081c:	60bb      	str	r3, [r7, #8]
		break;
 800081e:	e015      	b.n	800084c <gpio_pin_intialize+0x104>
	case GPIO_ALT_OUTPUT_PUSHPULL_MODE:
		conf = (((0b10<<2)| (PinConfig->GPIO_Output_Speed ))&0x0F);
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	799b      	ldrb	r3, [r3, #6]
 8000824:	f043 0308 	orr.w	r3, r3, #8
 8000828:	b2db      	uxtb	r3, r3
 800082a:	f003 030f 	and.w	r3, r3, #15
 800082e:	60bb      	str	r3, [r7, #8]
		break;
 8000830:	e00c      	b.n	800084c <gpio_pin_intialize+0x104>
	case GPIO_ALT_OUTPUT_OPENDRAIN_MODE:
		conf = (((0b11<<2)| (PinConfig->GPIO_Output_Speed ))&0x0F);
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	799b      	ldrb	r3, [r3, #6]
 8000836:	f043 030c 	orr.w	r3, r3, #12
 800083a:	b2db      	uxtb	r3, r3
 800083c:	f003 030f 	and.w	r3, r3, #15
 8000840:	60bb      	str	r3, [r7, #8]
		break;
 8000842:	e003      	b.n	800084c <gpio_pin_intialize+0x104>
	case GPIO_ALT_INPUT_MODE:
		conf = (((0b01<<2) | 0x0) & 0x0f);
 8000844:	2304      	movs	r3, #4
 8000846:	60bb      	str	r3, [r7, #8]
		break;
 8000848:	e000      	b.n	800084c <gpio_pin_intialize+0x104>
	default:
		break;
 800084a:	bf00      	nop
	}

	(*configregister) |= (  (  conf  ) << ( Get_CRL_Position( PinConfig->GPIO_PinNumber) ) ) ;
 800084c:	68bc      	ldr	r4, [r7, #8]
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	791b      	ldrb	r3, [r3, #4]
 8000852:	4618      	mov	r0, r3
 8000854:	f7ff ff64 	bl	8000720 <Get_CRL_Position>
 8000858:	4603      	mov	r3, r0
 800085a:	fa04 f203 	lsl.w	r2, r4, r3
 800085e:	68fb      	ldr	r3, [r7, #12]
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	431a      	orrs	r2, r3
 8000864:	68fb      	ldr	r3, [r7, #12]
 8000866:	601a      	str	r2, [r3, #0]

}
 8000868:	bf00      	nop
 800086a:	3714      	adds	r7, #20
 800086c:	46bd      	mov	sp, r7
 800086e:	bd90      	pop	{r4, r7, pc}

08000870 <gpio_pin_read_logic>:
 * @param [in] 			-PinConfig:
 * @retval 				-The input port pin value.
 * Note					-none
 */

logic_t gpio_pin_read_logic (GPIO_PinConfig_t* PinConfig){
 8000870:	b480      	push	{r7}
 8000872:	b083      	sub	sp, #12
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]


	return (READ_BIT((PinConfig->GPIO_Port->IDR),(PinConfig->GPIO_PinNumber)));
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	689b      	ldr	r3, [r3, #8]
 800087e:	687a      	ldr	r2, [r7, #4]
 8000880:	7912      	ldrb	r2, [r2, #4]
 8000882:	40d3      	lsrs	r3, r2
 8000884:	b2db      	uxtb	r3, r3
 8000886:	f003 0301 	and.w	r3, r3, #1
 800088a:	b2db      	uxtb	r3, r3


}
 800088c:	4618      	mov	r0, r3
 800088e:	370c      	adds	r7, #12
 8000890:	46bd      	mov	sp, r7
 8000892:	bc80      	pop	{r7}
 8000894:	4770      	bx	lr

08000896 <gpio_pin_write_logic>:
 *@param [in] 			-Value: Pin Value
 *
 * @retval 			-none
 * Note				-none
 */
void gpio_pin_write_logic ( GPIO_PinConfig_t* PinConfig, logic_t logic){
 8000896:	b480      	push	{r7}
 8000898:	b083      	sub	sp, #12
 800089a:	af00      	add	r7, sp, #0
 800089c:	6078      	str	r0, [r7, #4]
 800089e:	460b      	mov	r3, r1
 80008a0:	70fb      	strb	r3, [r7, #3]

	if(logic == 1)
 80008a2:	78fb      	ldrb	r3, [r7, #3]
 80008a4:	2b01      	cmp	r3, #1
 80008a6:	d10d      	bne.n	80008c4 <gpio_pin_write_logic+0x2e>
		SET_BIT((PinConfig->GPIO_Port->ODR),(PinConfig->GPIO_PinNumber));
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	68d9      	ldr	r1, [r3, #12]
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	791b      	ldrb	r3, [r3, #4]
 80008b2:	461a      	mov	r2, r3
 80008b4:	2301      	movs	r3, #1
 80008b6:	fa03 f202 	lsl.w	r2, r3, r2
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	430a      	orrs	r2, r1
 80008c0:	60da      	str	r2, [r3, #12]
	else
		CLEAR_BIT((PinConfig->GPIO_Port->ODR),(PinConfig->GPIO_PinNumber));


}
 80008c2:	e00c      	b.n	80008de <gpio_pin_write_logic+0x48>
		CLEAR_BIT((PinConfig->GPIO_Port->ODR),(PinConfig->GPIO_PinNumber));
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	68d9      	ldr	r1, [r3, #12]
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	791b      	ldrb	r3, [r3, #4]
 80008ce:	461a      	mov	r2, r3
 80008d0:	2301      	movs	r3, #1
 80008d2:	4093      	lsls	r3, r2
 80008d4:	43da      	mvns	r2, r3
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	400a      	ands	r2, r1
 80008dc:	60da      	str	r2, [r3, #12]
}
 80008de:	bf00      	nop
 80008e0:	370c      	adds	r7, #12
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bc80      	pop	{r7}
 80008e6:	4770      	bx	lr

080008e8 <delay_ms>:
	{
		return ERROR;
	}

}
void delay_ms(uint32_t time) {
 80008e8:	b480      	push	{r7}
 80008ea:	b085      	sub	sp, #20
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
	uint32_t i, j;
	for (i = 0; i < time; i++)
 80008f0:	2300      	movs	r3, #0
 80008f2:	60fb      	str	r3, [r7, #12]
 80008f4:	e00b      	b.n	800090e <delay_ms+0x26>
		for (j = 0; j < 255; j++)
 80008f6:	2300      	movs	r3, #0
 80008f8:	60bb      	str	r3, [r7, #8]
 80008fa:	e002      	b.n	8000902 <delay_ms+0x1a>
 80008fc:	68bb      	ldr	r3, [r7, #8]
 80008fe:	3301      	adds	r3, #1
 8000900:	60bb      	str	r3, [r7, #8]
 8000902:	68bb      	ldr	r3, [r7, #8]
 8000904:	2bfe      	cmp	r3, #254	; 0xfe
 8000906:	d9f9      	bls.n	80008fc <delay_ms+0x14>
	for (i = 0; i < time; i++)
 8000908:	68fb      	ldr	r3, [r7, #12]
 800090a:	3301      	adds	r3, #1
 800090c:	60fb      	str	r3, [r7, #12]
 800090e:	68fa      	ldr	r2, [r7, #12]
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	429a      	cmp	r2, r3
 8000914:	d3ef      	bcc.n	80008f6 <delay_ms+0xe>
			;
}
 8000916:	bf00      	nop
 8000918:	3714      	adds	r7, #20
 800091a:	46bd      	mov	sp, r7
 800091c:	bc80      	pop	{r7}
 800091e:	4770      	bx	lr

08000920 <I2C1_ER_IRQHandler>:
	return (uint8_t) I2Cx->DR;
}


void I2C1_ER_IRQHandler (void)
{
 8000920:	b480      	push	{r7}
 8000922:	af00      	add	r7, sp, #0

}
 8000924:	bf00      	nop
 8000926:	46bd      	mov	sp, r7
 8000928:	bc80      	pop	{r7}
 800092a:	4770      	bx	lr

0800092c <I2C1_EV_IRQHandler>:

void I2C1_EV_IRQHandler (void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b086      	sub	sp, #24
 8000930:	af00      	add	r7, sp, #0
	volatile uint32_t dummy_read = 0 ;
 8000932:	2300      	movs	r3, #0
 8000934:	607b      	str	r3, [r7, #4]
	I2C_TypeDef* I2Cx = I2C1 ;
 8000936:	4b37      	ldr	r3, [pc, #220]	; (8000a14 <I2C1_EV_IRQHandler+0xe8>)
 8000938:	617b      	str	r3, [r7, #20]
	//Interrupt handling for both master and slave mode of a device
	uint32_t temp1, temp2, temp3;

	temp1   = I2Cx->CR2 & (  I2C_CR2_ITEVTEN) ;
 800093a:	697b      	ldr	r3, [r7, #20]
 800093c:	685b      	ldr	r3, [r3, #4]
 800093e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000942:	613b      	str	r3, [r7, #16]
	temp2   = I2Cx->CR2 & ( I2C_CR2_ITBUFEN) ;
 8000944:	697b      	ldr	r3, [r7, #20]
 8000946:	685b      	ldr	r3, [r3, #4]
 8000948:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800094c:	60fb      	str	r3, [r7, #12]
	temp3  = I2Cx->SR1 & ( I2C_SR1_STOPF);
 800094e:	697b      	ldr	r3, [r7, #20]
 8000950:	695b      	ldr	r3, [r3, #20]
 8000952:	f003 0310 	and.w	r3, r3, #16
 8000956:	60bb      	str	r3, [r7, #8]


	// Handle For interrupt generated by STOPF event
		// Note : Stop detection flag is applicable only slave mode
		if(temp1 && temp3)
 8000958:	693b      	ldr	r3, [r7, #16]
 800095a:	2b00      	cmp	r3, #0
 800095c:	d00a      	beq.n	8000974 <I2C1_EV_IRQHandler+0x48>
 800095e:	68bb      	ldr	r3, [r7, #8]
 8000960:	2b00      	cmp	r3, #0
 8000962:	d007      	beq.n	8000974 <I2C1_EV_IRQHandler+0x48>
		{
			//STOF flag is set
			//Clear the STOPF ( i.e 1) read SR1 2) Write to CR1 )
			I2Cx->CR1 |= 0x0000;
 8000964:	697b      	ldr	r3, [r7, #20]
 8000966:	681a      	ldr	r2, [r3, #0]
 8000968:	697b      	ldr	r3, [r7, #20]
 800096a:	601a      	str	r2, [r3, #0]
			Slave_States(I2Cx,I2C_EV_STOP);
 800096c:	2100      	movs	r1, #0
 800096e:	6978      	ldr	r0, [r7, #20]
 8000970:	f000 f852 	bl	8000a18 <Slave_States>


		}
		//----------------------------------------------------------
		temp3  = I2Cx->SR1 & (I2C_SR1_ADDR);
 8000974:	697b      	ldr	r3, [r7, #20]
 8000976:	695b      	ldr	r3, [r3, #20]
 8000978:	f003 0302 	and.w	r3, r3, #2
 800097c:	60bb      	str	r3, [r7, #8]
		// Handle For interrupt generated by ADDR event
		//Note : When master mode : Address is sent
		//		 When Slave mode   : Address matched with own address
		if(temp1 && temp3)
 800097e:	693b      	ldr	r3, [r7, #16]
 8000980:	2b00      	cmp	r3, #0
 8000982:	d012      	beq.n	80009aa <I2C1_EV_IRQHandler+0x7e>
 8000984:	68bb      	ldr	r3, [r7, #8]
 8000986:	2b00      	cmp	r3, #0
 8000988:	d00f      	beq.n	80009aa <I2C1_EV_IRQHandler+0x7e>
		{
			// interrupt is generated because of ADDR event
			//check for device mode
			if(I2Cx->SR2 & ( I2C_SR2_MSL))
 800098a:	697b      	ldr	r3, [r7, #20]
 800098c:	699b      	ldr	r3, [r3, #24]
 800098e:	f003 0301 	and.w	r3, r3, #1
 8000992:	2b00      	cmp	r3, #0
 8000994:	d109      	bne.n	80009aa <I2C1_EV_IRQHandler+0x7e>

			}else
			{
				//slave mode
				//clear the ADDR flag ( read SR1 , read SR2)
				dummy_read = I2Cx->SR1;
 8000996:	697b      	ldr	r3, [r7, #20]
 8000998:	695b      	ldr	r3, [r3, #20]
 800099a:	607b      	str	r3, [r7, #4]
				dummy_read = I2Cx->SR2;
 800099c:	697b      	ldr	r3, [r7, #20]
 800099e:	699b      	ldr	r3, [r3, #24]
 80009a0:	607b      	str	r3, [r7, #4]
				Slave_States(I2Cx,I2C_EV_ADDR_Matched);
 80009a2:	2102      	movs	r1, #2
 80009a4:	6978      	ldr	r0, [r7, #20]
 80009a6:	f000 f837 	bl	8000a18 <Slave_States>

			}
		}
		//----------------------------------------------------------

		temp3  = I2Cx->SR1 & ( I2C_SR1_TXE);
 80009aa:	697b      	ldr	r3, [r7, #20]
 80009ac:	695b      	ldr	r3, [r3, #20]
 80009ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009b2:	60bb      	str	r3, [r7, #8]
		// Handle For interrupt generated by TXE event
		if(temp1 && temp2 && temp3)
 80009b4:	693b      	ldr	r3, [r7, #16]
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d00f      	beq.n	80009da <I2C1_EV_IRQHandler+0xae>
 80009ba:	68fb      	ldr	r3, [r7, #12]
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d00c      	beq.n	80009da <I2C1_EV_IRQHandler+0xae>
 80009c0:	68bb      	ldr	r3, [r7, #8]
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d009      	beq.n	80009da <I2C1_EV_IRQHandler+0xae>
		{
			//Check for device mode
			if(I2Cx->SR2 & (I2C_SR2_MSL))
 80009c6:	697b      	ldr	r3, [r7, #20]
 80009c8:	699b      	ldr	r3, [r3, #24]
 80009ca:	f003 0301 	and.w	r3, r3, #1
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d103      	bne.n	80009da <I2C1_EV_IRQHandler+0xae>
			{

			}else
			{
				//slave
				Slave_States(I2Cx,I2C_EV_DATA_REQ);
 80009d2:	2103      	movs	r1, #3
 80009d4:	6978      	ldr	r0, [r7, #20]
 80009d6:	f000 f81f 	bl	8000a18 <Slave_States>
			}
		}

		//----------------------------------------------------------

		temp3  = I2Cx->SR1 & ( I2C_SR1_RXNE);
 80009da:	697b      	ldr	r3, [r7, #20]
 80009dc:	695b      	ldr	r3, [r3, #20]
 80009de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009e2:	60bb      	str	r3, [r7, #8]
		// Handle For interrupt generated by 	SB=1, cleared by reading SR1 register followed by writing DR register with Address.
		if(temp1 && temp2 && temp3)
 80009e4:	693b      	ldr	r3, [r7, #16]
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d00f      	beq.n	8000a0a <I2C1_EV_IRQHandler+0xde>
 80009ea:	68fb      	ldr	r3, [r7, #12]
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d00c      	beq.n	8000a0a <I2C1_EV_IRQHandler+0xde>
 80009f0:	68bb      	ldr	r3, [r7, #8]
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d009      	beq.n	8000a0a <I2C1_EV_IRQHandler+0xde>
		{
			//check device mode .
			if(I2Cx->SR2 & ( I2C_SR2_MSL))
 80009f6:	697b      	ldr	r3, [r7, #20]
 80009f8:	699b      	ldr	r3, [r3, #24]
 80009fa:	f003 0301 	and.w	r3, r3, #1
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d103      	bne.n	8000a0a <I2C1_EV_IRQHandler+0xde>
				//The device is master

			}else
			{
				//slave
				Slave_States(I2Cx,I2C_EV_DATA_RCV);
 8000a02:	2104      	movs	r1, #4
 8000a04:	6978      	ldr	r0, [r7, #20]
 8000a06:	f000 f807 	bl	8000a18 <Slave_States>
			}
		}



}
 8000a0a:	bf00      	nop
 8000a0c:	3718      	adds	r7, #24
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	40005400 	.word	0x40005400

08000a18 <Slave_States>:


void Slave_States (I2C_TypeDef* I2Cx  ,Slave_State state)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b084      	sub	sp, #16
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
 8000a20:	460b      	mov	r3, r1
 8000a22:	70fb      	strb	r3, [r7, #3]
	uint8_t index =    I2Cx == I2C1 ? I2C1_INDEX: I2C2_INDEX ;
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	4a32      	ldr	r2, [pc, #200]	; (8000af0 <Slave_States+0xd8>)
 8000a28:	4293      	cmp	r3, r2
 8000a2a:	bf14      	ite	ne
 8000a2c:	2301      	movne	r3, #1
 8000a2e:	2300      	moveq	r3, #0
 8000a30:	b2db      	uxtb	r3, r3
 8000a32:	73fb      	strb	r3, [r7, #15]

	switch (state)
 8000a34:	78fb      	ldrb	r3, [r7, #3]
 8000a36:	2b04      	cmp	r3, #4
 8000a38:	d856      	bhi.n	8000ae8 <Slave_States+0xd0>
 8000a3a:	a201      	add	r2, pc, #4	; (adr r2, 8000a40 <Slave_States+0x28>)
 8000a3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a40:	08000a5b 	.word	0x08000a5b
 8000a44:	08000a55 	.word	0x08000a55
 8000a48:	08000a7f 	.word	0x08000a7f
 8000a4c:	08000a97 	.word	0x08000a97
 8000a50:	08000abb 	.word	0x08000abb
	{

	case I2C_ERROR_AF:
	{
		//make sure that the slave is really in transmitter mode
		if(I2Cx->SR2 & ( I2C_SR2_TRA))
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	699b      	ldr	r3, [r3, #24]
		{
			//Slave Shouldn't Send anything else

		}

		break ;
 8000a58:	e046      	b.n	8000ae8 <Slave_States+0xd0>
	}

	case I2C_EV_STOP:
	{
		//make sure that the slave is really in transmitter mode
		if(I2Cx->SR2 & ( I2C_SR2_TRA))
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	699b      	ldr	r3, [r3, #24]
 8000a5e:	f003 0304 	and.w	r3, r3, #4
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d03b      	beq.n	8000ade <Slave_States+0xc6>
		{
			//Notify APP that the Stop Condition is sent by the master
			Global_I2C_Config [index].P_Slave_Event_CallBack (I2C_EV_STOP) ;
 8000a66:	7bfa      	ldrb	r2, [r7, #15]
 8000a68:	4922      	ldr	r1, [pc, #136]	; (8000af4 <Slave_States+0xdc>)
 8000a6a:	4613      	mov	r3, r2
 8000a6c:	00db      	lsls	r3, r3, #3
 8000a6e:	4413      	add	r3, r2
 8000a70:	009b      	lsls	r3, r3, #2
 8000a72:	440b      	add	r3, r1
 8000a74:	3320      	adds	r3, #32
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	2000      	movs	r0, #0
 8000a7a:	4798      	blx	r3
		}

		break ;
 8000a7c:	e02f      	b.n	8000ade <Slave_States+0xc6>
	}

	case I2C_EV_ADDR_Matched:
	{
		//Notify APP that the Stop Condition is sent by the master
		Global_I2C_Config [index].P_Slave_Event_CallBack (I2C_EV_ADDR_Matched) ;
 8000a7e:	7bfa      	ldrb	r2, [r7, #15]
 8000a80:	491c      	ldr	r1, [pc, #112]	; (8000af4 <Slave_States+0xdc>)
 8000a82:	4613      	mov	r3, r2
 8000a84:	00db      	lsls	r3, r3, #3
 8000a86:	4413      	add	r3, r2
 8000a88:	009b      	lsls	r3, r3, #2
 8000a8a:	440b      	add	r3, r1
 8000a8c:	3320      	adds	r3, #32
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	2002      	movs	r0, #2
 8000a92:	4798      	blx	r3

		break ;
 8000a94:	e028      	b.n	8000ae8 <Slave_States+0xd0>
	}

	case I2C_EV_DATA_REQ:
	{
		//make sure that the slave is really in transmitter mode
		if(I2Cx->SR2 & ( I2C_SR2_TRA))
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	699b      	ldr	r3, [r3, #24]
 8000a9a:	f003 0304 	and.w	r3, r3, #4
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d01f      	beq.n	8000ae2 <Slave_States+0xca>
		{
			//the APP layer should send the data (MCAL_I2C_SlaveSendData ) in this state
			Global_I2C_Config [index].P_Slave_Event_CallBack (I2C_EV_DATA_REQ) ;
 8000aa2:	7bfa      	ldrb	r2, [r7, #15]
 8000aa4:	4913      	ldr	r1, [pc, #76]	; (8000af4 <Slave_States+0xdc>)
 8000aa6:	4613      	mov	r3, r2
 8000aa8:	00db      	lsls	r3, r3, #3
 8000aaa:	4413      	add	r3, r2
 8000aac:	009b      	lsls	r3, r3, #2
 8000aae:	440b      	add	r3, r1
 8000ab0:	3320      	adds	r3, #32
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	2003      	movs	r0, #3
 8000ab6:	4798      	blx	r3
		}

		break ;
 8000ab8:	e013      	b.n	8000ae2 <Slave_States+0xca>
	}
	case I2C_EV_DATA_RCV:
	{
		//make sure that the slave is really in receiver mode
		if(!(I2Cx->SR2 & ( I2C_SR2_TRA)))
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	699b      	ldr	r3, [r3, #24]
 8000abe:	f003 0304 	and.w	r3, r3, #4
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d10f      	bne.n	8000ae6 <Slave_States+0xce>
		{
			//the APP layer should read the data (MCAL_I2C_SlaveReceiveData ) in this state
			Global_I2C_Config [index].P_Slave_Event_CallBack (I2C_EV_DATA_RCV) ;
 8000ac6:	7bfa      	ldrb	r2, [r7, #15]
 8000ac8:	490a      	ldr	r1, [pc, #40]	; (8000af4 <Slave_States+0xdc>)
 8000aca:	4613      	mov	r3, r2
 8000acc:	00db      	lsls	r3, r3, #3
 8000ace:	4413      	add	r3, r2
 8000ad0:	009b      	lsls	r3, r3, #2
 8000ad2:	440b      	add	r3, r1
 8000ad4:	3320      	adds	r3, #32
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	2004      	movs	r0, #4
 8000ada:	4798      	blx	r3
		}

		break ;
 8000adc:	e003      	b.n	8000ae6 <Slave_States+0xce>
		break ;
 8000ade:	bf00      	nop
 8000ae0:	e002      	b.n	8000ae8 <Slave_States+0xd0>
		break ;
 8000ae2:	bf00      	nop
 8000ae4:	e000      	b.n	8000ae8 <Slave_States+0xd0>
		break ;
 8000ae6:	bf00      	nop
	}
	}

}
 8000ae8:	bf00      	nop
 8000aea:	3710      	adds	r7, #16
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bd80      	pop	{r7, pc}
 8000af0:	40005400 	.word	0x40005400
 8000af4:	20000114 	.word	0x20000114

08000af8 <I2C2_ER_IRQHandler>:

void I2C2_ER_IRQHandler (void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0

}
 8000afc:	bf00      	nop
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bc80      	pop	{r7}
 8000b02:	4770      	bx	lr

08000b04 <I2C2_EV_IRQHandler>:

void I2C2_EV_IRQHandler (void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0

}
 8000b08:	bf00      	nop
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bc80      	pop	{r7}
 8000b0e:	4770      	bx	lr

08000b10 <MCAL_RCC_GetSYS_CLCKFreq>:
 * 							Generic Functions
 * =======================================================================================
 */

uint32_t MCAL_RCC_GetSYS_CLCKFreq(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
//	Set and cleared by hardware to indicate which clock source is used as system clock.
//	00: HSI oscillator used as system clock
//	01: HSE oscillator used as system clock
//	10: PLL used as system clock
//	11: Not applicable
	switch  ( (RCC->CFGR  >> 2  ) & 0b11 )
 8000b14:	4b0a      	ldr	r3, [pc, #40]	; (8000b40 <MCAL_RCC_GetSYS_CLCKFreq+0x30>)
 8000b16:	685b      	ldr	r3, [r3, #4]
 8000b18:	089b      	lsrs	r3, r3, #2
 8000b1a:	f003 0303 	and.w	r3, r3, #3
 8000b1e:	2b01      	cmp	r3, #1
 8000b20:	d006      	beq.n	8000b30 <MCAL_RCC_GetSYS_CLCKFreq+0x20>
 8000b22:	2b01      	cmp	r3, #1
 8000b24:	d302      	bcc.n	8000b2c <MCAL_RCC_GetSYS_CLCKFreq+0x1c>
 8000b26:	2b02      	cmp	r3, #2
 8000b28:	d004      	beq.n	8000b34 <MCAL_RCC_GetSYS_CLCKFreq+0x24>
 8000b2a:	e005      	b.n	8000b38 <MCAL_RCC_GetSYS_CLCKFreq+0x28>
	{
	case 0:

		return HSI_RC_Clk ;
 8000b2c:	4b05      	ldr	r3, [pc, #20]	; (8000b44 <MCAL_RCC_GetSYS_CLCKFreq+0x34>)
 8000b2e:	e003      	b.n	8000b38 <MCAL_RCC_GetSYS_CLCKFreq+0x28>
		break ;

	case 1:

		//todo need to calculate  it //HSE User Should Specify it
		return HSE_Clock ;
 8000b30:	4b05      	ldr	r3, [pc, #20]	; (8000b48 <MCAL_RCC_GetSYS_CLCKFreq+0x38>)
 8000b32:	e001      	b.n	8000b38 <MCAL_RCC_GetSYS_CLCKFreq+0x28>
		break ;

	case 2:

		//todo need to calculate  it PLLCLK and PLLMUL & PLL Source MUX
		return 16000000 ;
 8000b34:	4b04      	ldr	r3, [pc, #16]	; (8000b48 <MCAL_RCC_GetSYS_CLCKFreq+0x38>)
 8000b36:	e7ff      	b.n	8000b38 <MCAL_RCC_GetSYS_CLCKFreq+0x28>
		break ;

	}

}
 8000b38:	4618      	mov	r0, r3
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bc80      	pop	{r7}
 8000b3e:	4770      	bx	lr
 8000b40:	40021000 	.word	0x40021000
 8000b44:	007a1200 	.word	0x007a1200
 8000b48:	00f42400 	.word	0x00f42400

08000b4c <MCAL_RCC_GetHCLKFreq>:


uint32_t MCAL_RCC_GetHCLKFreq(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	af00      	add	r7, sp, #0
	/* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
	return (MCAL_RCC_GetSYS_CLCKFreq() >> AHBPrescTable[ ( (RCC->CFGR >> 4 ) & 0xF) ]  ); //the first shift is multiplication}
 8000b50:	f7ff ffde 	bl	8000b10 <MCAL_RCC_GetSYS_CLCKFreq>
 8000b54:	4601      	mov	r1, r0
 8000b56:	4b05      	ldr	r3, [pc, #20]	; (8000b6c <MCAL_RCC_GetHCLKFreq+0x20>)
 8000b58:	685b      	ldr	r3, [r3, #4]
 8000b5a:	091b      	lsrs	r3, r3, #4
 8000b5c:	f003 030f 	and.w	r3, r3, #15
 8000b60:	4a03      	ldr	r2, [pc, #12]	; (8000b70 <MCAL_RCC_GetHCLKFreq+0x24>)
 8000b62:	5cd3      	ldrb	r3, [r2, r3]
 8000b64:	fa21 f303 	lsr.w	r3, r1, r3
}
 8000b68:	4618      	mov	r0, r3
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	40021000 	.word	0x40021000
 8000b70:	08001c64 	.word	0x08001c64

08000b74 <MCAL_RCC_GetPCLK1Freq>:

//APB Low speed clock (PCLK1).
//Bits 10:8 PPRE1[2:0]: APB Low-speed prescaler (APB1)
uint32_t MCAL_RCC_GetPCLK1Freq(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	af00      	add	r7, sp, #0
	/* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
	return (MCAL_RCC_GetHCLKFreq() >> APBPrescTable[ ( (RCC->CFGR >> 8 ) & 0b111) ]  ); //the first shift is multiplication
 8000b78:	f7ff ffe8 	bl	8000b4c <MCAL_RCC_GetHCLKFreq>
 8000b7c:	4601      	mov	r1, r0
 8000b7e:	4b05      	ldr	r3, [pc, #20]	; (8000b94 <MCAL_RCC_GetPCLK1Freq+0x20>)
 8000b80:	685b      	ldr	r3, [r3, #4]
 8000b82:	0a1b      	lsrs	r3, r3, #8
 8000b84:	f003 0307 	and.w	r3, r3, #7
 8000b88:	4a03      	ldr	r2, [pc, #12]	; (8000b98 <MCAL_RCC_GetPCLK1Freq+0x24>)
 8000b8a:	5cd3      	ldrb	r3, [r2, r3]
 8000b8c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8000b90:	4618      	mov	r0, r3
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	40021000 	.word	0x40021000
 8000b98:	08001c5c 	.word	0x08001c5c

08000b9c <MCAL_RCC_GetPCLK2Freq>:

uint32_t MCAL_RCC_GetPCLK2Freq(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	af00      	add	r7, sp, #0
	/* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
	return (MCAL_RCC_GetHCLKFreq() >> APBPrescTable[ ( (RCC->CFGR >> 11 ) & 0b111) ]  ); //the first shift is multiplication
 8000ba0:	f7ff ffd4 	bl	8000b4c <MCAL_RCC_GetHCLKFreq>
 8000ba4:	4601      	mov	r1, r0
 8000ba6:	4b05      	ldr	r3, [pc, #20]	; (8000bbc <MCAL_RCC_GetPCLK2Freq+0x20>)
 8000ba8:	685b      	ldr	r3, [r3, #4]
 8000baa:	0adb      	lsrs	r3, r3, #11
 8000bac:	f003 0307 	and.w	r3, r3, #7
 8000bb0:	4a03      	ldr	r2, [pc, #12]	; (8000bc0 <MCAL_RCC_GetPCLK2Freq+0x24>)
 8000bb2:	5cd3      	ldrb	r3, [r2, r3]
 8000bb4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8000bb8:	4618      	mov	r0, r3
 8000bba:	bd80      	pop	{r7, pc}
 8000bbc:	40021000 	.word	0x40021000
 8000bc0:	08001c5c 	.word	0x08001c5c

08000bc4 <SPI1_IRQHandler>:

/* ================= IRQ Function Definitions ===================== */
/* ================================================================ */

void SPI1_IRQHandler(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	af00      	add	r7, sp, #0
	SPI_INT_CALLBACK [0]();
 8000bc8:	4b02      	ldr	r3, [pc, #8]	; (8000bd4 <SPI1_IRQHandler+0x10>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	4798      	blx	r3
}
 8000bce:	bf00      	nop
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	2000015c 	.word	0x2000015c

08000bd8 <SPI2_IRQHandler>:


void SPI2_IRQHandler(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	af00      	add	r7, sp, #0
	SPI_INT_CALLBACK [1]();
 8000bdc:	4b02      	ldr	r3, [pc, #8]	; (8000be8 <SPI2_IRQHandler+0x10>)
 8000bde:	685b      	ldr	r3, [r3, #4]
 8000be0:	4798      	blx	r3
}
 8000be2:	bf00      	nop
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	2000015c 	.word	0x2000015c

08000bec <PWM>:
 *
 *  Created on: Sep 15, 2023
 *      Author: GTX
 */
#include "TIMER.h"
void PWM(TIMER_t* CONF,uint32_t CH,uint32_t duty_cycle){
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b08a      	sub	sp, #40	; 0x28
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	60f8      	str	r0, [r7, #12]
 8000bf4:	60b9      	str	r1, [r7, #8]
 8000bf6:	607a      	str	r2, [r7, #4]
	CONF->TIMERx->CR1 &=~(1<<0);//Counter disabled
 8000bf8:	68fb      	ldr	r3, [r7, #12]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	681a      	ldr	r2, [r3, #0]
 8000bfe:	68fb      	ldr	r3, [r7, #12]
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	f022 0201 	bic.w	r2, r2, #1
 8000c06:	601a      	str	r2, [r3, #0]
	GPIO_PinConfig_t pin;
	char user_flage=1;
 8000c08:	2301      	movs	r3, #1
 8000c0a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint32_t AUTO_RELOAD=0;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	623b      	str	r3, [r7, #32]
	uint32_t PRESCALE=1;
 8000c12:	2301      	movs	r3, #1
 8000c14:	61fb      	str	r3, [r7, #28]

	while(user_flage==1){
 8000c16:	e014      	b.n	8000c42 <PWM+0x56>
		AUTO_RELOAD = (CONF->CLOCK)/(CONF->FREQUENCY * PRESCALE );
 8000c18:	68fb      	ldr	r3, [r7, #12]
 8000c1a:	689a      	ldr	r2, [r3, #8]
 8000c1c:	68fb      	ldr	r3, [r7, #12]
 8000c1e:	685b      	ldr	r3, [r3, #4]
 8000c20:	69f9      	ldr	r1, [r7, #28]
 8000c22:	fb01 f303 	mul.w	r3, r1, r3
 8000c26:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c2a:	623b      	str	r3, [r7, #32]
		if(AUTO_RELOAD>=32000){
 8000c2c:	6a3b      	ldr	r3, [r7, #32]
 8000c2e:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 8000c32:	d303      	bcc.n	8000c3c <PWM+0x50>
			PRESCALE+=2;
 8000c34:	69fb      	ldr	r3, [r7, #28]
 8000c36:	3302      	adds	r3, #2
 8000c38:	61fb      	str	r3, [r7, #28]
 8000c3a:	e002      	b.n	8000c42 <PWM+0x56>
		}
		else{
			user_flage=0;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while(user_flage==1){
 8000c42:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000c46:	2b01      	cmp	r3, #1
 8000c48:	d0e6      	beq.n	8000c18 <PWM+0x2c>
		}
	}

	if(CONF->TIMERx == TIM2){
 8000c4a:	68fb      	ldr	r3, [r7, #12]
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000c52:	f040 811d 	bne.w	8000e90 <PWM+0x2a4>
		RCC_TIMER2_Enable();
 8000c56:	4b8b      	ldr	r3, [pc, #556]	; (8000e84 <PWM+0x298>)
 8000c58:	69db      	ldr	r3, [r3, #28]
 8000c5a:	4a8a      	ldr	r2, [pc, #552]	; (8000e84 <PWM+0x298>)
 8000c5c:	f043 0301 	orr.w	r3, r3, #1
 8000c60:	61d3      	str	r3, [r2, #28]
		RCC_GPIOA_CLK_EN();
 8000c62:	4b88      	ldr	r3, [pc, #544]	; (8000e84 <PWM+0x298>)
 8000c64:	699b      	ldr	r3, [r3, #24]
 8000c66:	4a87      	ldr	r2, [pc, #540]	; (8000e84 <PWM+0x298>)
 8000c68:	f043 0304 	orr.w	r3, r3, #4
 8000c6c:	6193      	str	r3, [r2, #24]
		RCC_AFIO_CLK_EN();
 8000c6e:	4b85      	ldr	r3, [pc, #532]	; (8000e84 <PWM+0x298>)
 8000c70:	699b      	ldr	r3, [r3, #24]
 8000c72:	4a84      	ldr	r2, [pc, #528]	; (8000e84 <PWM+0x298>)
 8000c74:	f043 0301 	orr.w	r3, r3, #1
 8000c78:	6193      	str	r3, [r2, #24]

		if(CH==1){
 8000c7a:	68bb      	ldr	r3, [r7, #8]
 8000c7c:	2b01      	cmp	r3, #1
 8000c7e:	d13d      	bne.n	8000cfc <PWM+0x110>
			pin.GPIO_MODE =GPIO_ALT_OUTPUT_PUSHPULL_MODE;
 8000c80:	2306      	movs	r3, #6
 8000c82:	767b      	strb	r3, [r7, #25]
			pin.GPIO_Output_Speed =GPIO_SPEED_50M;
 8000c84:	2303      	movs	r3, #3
 8000c86:	76bb      	strb	r3, [r7, #26]
			pin.GPIO_PinNumber=0 ;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	763b      	strb	r3, [r7, #24]
			pin.GPIO_Port =GPIOA;
 8000c8c:	4b7e      	ldr	r3, [pc, #504]	; (8000e88 <PWM+0x29c>)
 8000c8e:	617b      	str	r3, [r7, #20]
			gpio_pin_intialize(&pin);
 8000c90:	f107 0314 	add.w	r3, r7, #20
 8000c94:	4618      	mov	r0, r3
 8000c96:	f7ff fd57 	bl	8000748 <gpio_pin_intialize>

			CONF->TIMERx->CCMR1 |=(1<<3);
 8000c9a:	68fb      	ldr	r3, [r7, #12]
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	699a      	ldr	r2, [r3, #24]
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	f042 0208 	orr.w	r2, r2, #8
 8000ca8:	619a      	str	r2, [r3, #24]
			CONF->TIMERx->CCER |=(1<<0);
 8000caa:	68fb      	ldr	r3, [r7, #12]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	6a1a      	ldr	r2, [r3, #32]
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	f042 0201 	orr.w	r2, r2, #1
 8000cb8:	621a      	str	r2, [r3, #32]
			CONF->TIMERx->CCMR1 |=(0b110<<4);
 8000cba:	68fb      	ldr	r3, [r7, #12]
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	699a      	ldr	r2, [r3, #24]
 8000cc0:	68fb      	ldr	r3, [r7, #12]
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8000cc8:	619a      	str	r2, [r3, #24]
			CONF->TIMERx->CCR1=(AUTO_RELOAD*duty_cycle*10/1000);//duty cycle
 8000cca:	6a3b      	ldr	r3, [r7, #32]
 8000ccc:	687a      	ldr	r2, [r7, #4]
 8000cce:	fb02 f203 	mul.w	r2, r2, r3
 8000cd2:	4613      	mov	r3, r2
 8000cd4:	009b      	lsls	r3, r3, #2
 8000cd6:	4413      	add	r3, r2
 8000cd8:	005b      	lsls	r3, r3, #1
 8000cda:	4619      	mov	r1, r3
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	4a6a      	ldr	r2, [pc, #424]	; (8000e8c <PWM+0x2a0>)
 8000ce2:	fba2 1201 	umull	r1, r2, r2, r1
 8000ce6:	0992      	lsrs	r2, r2, #6
 8000ce8:	635a      	str	r2, [r3, #52]	; 0x34
			CONF->TIMERx->DIER |=(0b11<<0);
 8000cea:	68fb      	ldr	r3, [r7, #12]
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	68da      	ldr	r2, [r3, #12]
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	f042 0203 	orr.w	r2, r2, #3
 8000cf8:	60da      	str	r2, [r3, #12]
 8000cfa:	e312      	b.n	8001322 <PWM+0x736>
		}
		else if(CH==2){
 8000cfc:	68bb      	ldr	r3, [r7, #8]
 8000cfe:	2b02      	cmp	r3, #2
 8000d00:	d13d      	bne.n	8000d7e <PWM+0x192>
			pin.GPIO_MODE =GPIO_ALT_OUTPUT_PUSHPULL_MODE;
 8000d02:	2306      	movs	r3, #6
 8000d04:	767b      	strb	r3, [r7, #25]
			pin.GPIO_Output_Speed =GPIO_SPEED_50M;
 8000d06:	2303      	movs	r3, #3
 8000d08:	76bb      	strb	r3, [r7, #26]
			pin.GPIO_PinNumber=1 ;
 8000d0a:	2301      	movs	r3, #1
 8000d0c:	763b      	strb	r3, [r7, #24]
			pin.GPIO_Port =GPIOA;
 8000d0e:	4b5e      	ldr	r3, [pc, #376]	; (8000e88 <PWM+0x29c>)
 8000d10:	617b      	str	r3, [r7, #20]
			gpio_pin_intialize(&pin);
 8000d12:	f107 0314 	add.w	r3, r7, #20
 8000d16:	4618      	mov	r0, r3
 8000d18:	f7ff fd16 	bl	8000748 <gpio_pin_intialize>
			CONF->TIMERx->CCMR1 |=(1<<11);
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	699a      	ldr	r2, [r3, #24]
 8000d22:	68fb      	ldr	r3, [r7, #12]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000d2a:	619a      	str	r2, [r3, #24]
			CONF->TIMERx->CCER |=(1<<4);
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	6a1a      	ldr	r2, [r3, #32]
 8000d32:	68fb      	ldr	r3, [r7, #12]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	f042 0210 	orr.w	r2, r2, #16
 8000d3a:	621a      	str	r2, [r3, #32]
			CONF->TIMERx->CCMR1 |=(0b110<<12);
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	699a      	ldr	r2, [r3, #24]
 8000d42:	68fb      	ldr	r3, [r7, #12]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 8000d4a:	619a      	str	r2, [r3, #24]
			CONF->TIMERx->CCR2=(AUTO_RELOAD*duty_cycle*10/1000);//duty cycle
 8000d4c:	6a3b      	ldr	r3, [r7, #32]
 8000d4e:	687a      	ldr	r2, [r7, #4]
 8000d50:	fb02 f203 	mul.w	r2, r2, r3
 8000d54:	4613      	mov	r3, r2
 8000d56:	009b      	lsls	r3, r3, #2
 8000d58:	4413      	add	r3, r2
 8000d5a:	005b      	lsls	r3, r3, #1
 8000d5c:	4619      	mov	r1, r3
 8000d5e:	68fb      	ldr	r3, [r7, #12]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	4a4a      	ldr	r2, [pc, #296]	; (8000e8c <PWM+0x2a0>)
 8000d64:	fba2 1201 	umull	r1, r2, r2, r1
 8000d68:	0992      	lsrs	r2, r2, #6
 8000d6a:	639a      	str	r2, [r3, #56]	; 0x38
			CONF->TIMERx->DIER |=(0b101<<0);
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	68da      	ldr	r2, [r3, #12]
 8000d72:	68fb      	ldr	r3, [r7, #12]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	f042 0205 	orr.w	r2, r2, #5
 8000d7a:	60da      	str	r2, [r3, #12]
 8000d7c:	e2d1      	b.n	8001322 <PWM+0x736>
		}
		else if(CH==3){
 8000d7e:	68bb      	ldr	r3, [r7, #8]
 8000d80:	2b03      	cmp	r3, #3
 8000d82:	d13d      	bne.n	8000e00 <PWM+0x214>
			pin.GPIO_MODE =GPIO_ALT_OUTPUT_PUSHPULL_MODE;
 8000d84:	2306      	movs	r3, #6
 8000d86:	767b      	strb	r3, [r7, #25]
			pin.GPIO_Output_Speed =GPIO_SPEED_50M;
 8000d88:	2303      	movs	r3, #3
 8000d8a:	76bb      	strb	r3, [r7, #26]
			pin.GPIO_PinNumber=2 ;
 8000d8c:	2302      	movs	r3, #2
 8000d8e:	763b      	strb	r3, [r7, #24]
			pin.GPIO_Port =GPIOA;
 8000d90:	4b3d      	ldr	r3, [pc, #244]	; (8000e88 <PWM+0x29c>)
 8000d92:	617b      	str	r3, [r7, #20]
			gpio_pin_intialize(&pin);
 8000d94:	f107 0314 	add.w	r3, r7, #20
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f7ff fcd5 	bl	8000748 <gpio_pin_intialize>
			CONF->TIMERx->CCMR2 |=(1<<3);
 8000d9e:	68fb      	ldr	r3, [r7, #12]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	69da      	ldr	r2, [r3, #28]
 8000da4:	68fb      	ldr	r3, [r7, #12]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	f042 0208 	orr.w	r2, r2, #8
 8000dac:	61da      	str	r2, [r3, #28]
			CONF->TIMERx->CCER |=(1<<8);
 8000dae:	68fb      	ldr	r3, [r7, #12]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	6a1a      	ldr	r2, [r3, #32]
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000dbc:	621a      	str	r2, [r3, #32]
			CONF->TIMERx->CCMR2 |=(0b110<<4);
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	69da      	ldr	r2, [r3, #28]
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8000dcc:	61da      	str	r2, [r3, #28]
			CONF->TIMERx->CCR3=(AUTO_RELOAD*duty_cycle*10/1000);//duty cycle
 8000dce:	6a3b      	ldr	r3, [r7, #32]
 8000dd0:	687a      	ldr	r2, [r7, #4]
 8000dd2:	fb02 f203 	mul.w	r2, r2, r3
 8000dd6:	4613      	mov	r3, r2
 8000dd8:	009b      	lsls	r3, r3, #2
 8000dda:	4413      	add	r3, r2
 8000ddc:	005b      	lsls	r3, r3, #1
 8000dde:	4619      	mov	r1, r3
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	4a29      	ldr	r2, [pc, #164]	; (8000e8c <PWM+0x2a0>)
 8000de6:	fba2 1201 	umull	r1, r2, r2, r1
 8000dea:	0992      	lsrs	r2, r2, #6
 8000dec:	63da      	str	r2, [r3, #60]	; 0x3c
			CONF->TIMERx->DIER |=(0b1001<<0);
 8000dee:	68fb      	ldr	r3, [r7, #12]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	68da      	ldr	r2, [r3, #12]
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	f042 0209 	orr.w	r2, r2, #9
 8000dfc:	60da      	str	r2, [r3, #12]
 8000dfe:	e290      	b.n	8001322 <PWM+0x736>
		}
		else if(CH==4){
 8000e00:	68bb      	ldr	r3, [r7, #8]
 8000e02:	2b04      	cmp	r3, #4
 8000e04:	f040 828d 	bne.w	8001322 <PWM+0x736>
			pin.GPIO_MODE =GPIO_ALT_OUTPUT_PUSHPULL_MODE;
 8000e08:	2306      	movs	r3, #6
 8000e0a:	767b      	strb	r3, [r7, #25]
			pin.GPIO_Output_Speed =GPIO_SPEED_50M;
 8000e0c:	2303      	movs	r3, #3
 8000e0e:	76bb      	strb	r3, [r7, #26]
			pin.GPIO_PinNumber=3 ;
 8000e10:	2303      	movs	r3, #3
 8000e12:	763b      	strb	r3, [r7, #24]
			pin.GPIO_Port =GPIOA;
 8000e14:	4b1c      	ldr	r3, [pc, #112]	; (8000e88 <PWM+0x29c>)
 8000e16:	617b      	str	r3, [r7, #20]
			gpio_pin_intialize(&pin);
 8000e18:	f107 0314 	add.w	r3, r7, #20
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	f7ff fc93 	bl	8000748 <gpio_pin_intialize>
			CONF->TIMERx->CCMR2 |=(1<<11);
 8000e22:	68fb      	ldr	r3, [r7, #12]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	69da      	ldr	r2, [r3, #28]
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000e30:	61da      	str	r2, [r3, #28]
			CONF->TIMERx->CCER |=(1<<12);
 8000e32:	68fb      	ldr	r3, [r7, #12]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	6a1a      	ldr	r2, [r3, #32]
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000e40:	621a      	str	r2, [r3, #32]
			CONF->TIMERx->CCMR2 |=(0b110<<12);
 8000e42:	68fb      	ldr	r3, [r7, #12]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	69da      	ldr	r2, [r3, #28]
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 8000e50:	61da      	str	r2, [r3, #28]
			CONF->TIMERx->CCR4=(AUTO_RELOAD*duty_cycle*10/1000);//duty cycle
 8000e52:	6a3b      	ldr	r3, [r7, #32]
 8000e54:	687a      	ldr	r2, [r7, #4]
 8000e56:	fb02 f203 	mul.w	r2, r2, r3
 8000e5a:	4613      	mov	r3, r2
 8000e5c:	009b      	lsls	r3, r3, #2
 8000e5e:	4413      	add	r3, r2
 8000e60:	005b      	lsls	r3, r3, #1
 8000e62:	4619      	mov	r1, r3
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	4a08      	ldr	r2, [pc, #32]	; (8000e8c <PWM+0x2a0>)
 8000e6a:	fba2 1201 	umull	r1, r2, r2, r1
 8000e6e:	0992      	lsrs	r2, r2, #6
 8000e70:	641a      	str	r2, [r3, #64]	; 0x40
			CONF->TIMERx->DIER |=(0b10001<<0);
 8000e72:	68fb      	ldr	r3, [r7, #12]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	68da      	ldr	r2, [r3, #12]
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	f042 0211 	orr.w	r2, r2, #17
 8000e80:	60da      	str	r2, [r3, #12]
 8000e82:	e24e      	b.n	8001322 <PWM+0x736>
 8000e84:	40021000 	.word	0x40021000
 8000e88:	40010800 	.word	0x40010800
 8000e8c:	10624dd3 	.word	0x10624dd3
		}
	}
	else if (CONF->TIMERx==TIM3){
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	4a90      	ldr	r2, [pc, #576]	; (80010d8 <PWM+0x4ec>)
 8000e96:	4293      	cmp	r3, r2
 8000e98:	f040 8128 	bne.w	80010ec <PWM+0x500>
		RCC_TIMER3_Enable();//enable timer3 clock
 8000e9c:	4b8f      	ldr	r3, [pc, #572]	; (80010dc <PWM+0x4f0>)
 8000e9e:	69db      	ldr	r3, [r3, #28]
 8000ea0:	4a8e      	ldr	r2, [pc, #568]	; (80010dc <PWM+0x4f0>)
 8000ea2:	f043 0302 	orr.w	r3, r3, #2
 8000ea6:	61d3      	str	r3, [r2, #28]
		RCC_GPIOA_CLK_EN();
 8000ea8:	4b8c      	ldr	r3, [pc, #560]	; (80010dc <PWM+0x4f0>)
 8000eaa:	699b      	ldr	r3, [r3, #24]
 8000eac:	4a8b      	ldr	r2, [pc, #556]	; (80010dc <PWM+0x4f0>)
 8000eae:	f043 0304 	orr.w	r3, r3, #4
 8000eb2:	6193      	str	r3, [r2, #24]
		RCC_GPIOB_CLK_EN();
 8000eb4:	4b89      	ldr	r3, [pc, #548]	; (80010dc <PWM+0x4f0>)
 8000eb6:	699b      	ldr	r3, [r3, #24]
 8000eb8:	4a88      	ldr	r2, [pc, #544]	; (80010dc <PWM+0x4f0>)
 8000eba:	f043 0308 	orr.w	r3, r3, #8
 8000ebe:	6193      	str	r3, [r2, #24]
		RCC_AFIO_CLK_EN();
 8000ec0:	4b86      	ldr	r3, [pc, #536]	; (80010dc <PWM+0x4f0>)
 8000ec2:	699b      	ldr	r3, [r3, #24]
 8000ec4:	4a85      	ldr	r2, [pc, #532]	; (80010dc <PWM+0x4f0>)
 8000ec6:	f043 0301 	orr.w	r3, r3, #1
 8000eca:	6193      	str	r3, [r2, #24]

			if(CH==1){
 8000ecc:	68bb      	ldr	r3, [r7, #8]
 8000ece:	2b01      	cmp	r3, #1
 8000ed0:	d13d      	bne.n	8000f4e <PWM+0x362>
				pin.GPIO_MODE =GPIO_ALT_OUTPUT_PUSHPULL_MODE;
 8000ed2:	2306      	movs	r3, #6
 8000ed4:	767b      	strb	r3, [r7, #25]
				pin.GPIO_Output_Speed =GPIO_SPEED_50M;
 8000ed6:	2303      	movs	r3, #3
 8000ed8:	76bb      	strb	r3, [r7, #26]
				pin.GPIO_PinNumber=6 ;
 8000eda:	2306      	movs	r3, #6
 8000edc:	763b      	strb	r3, [r7, #24]
				pin.GPIO_Port =GPIOA;
 8000ede:	4b80      	ldr	r3, [pc, #512]	; (80010e0 <PWM+0x4f4>)
 8000ee0:	617b      	str	r3, [r7, #20]
				gpio_pin_intialize(&pin);
 8000ee2:	f107 0314 	add.w	r3, r7, #20
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	f7ff fc2e 	bl	8000748 <gpio_pin_intialize>

				CONF->TIMERx->CCMR1 |=(1<<3);
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	699a      	ldr	r2, [r3, #24]
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	f042 0208 	orr.w	r2, r2, #8
 8000efa:	619a      	str	r2, [r3, #24]
				CONF->TIMERx->CCER |=(1<<0);
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	6a1a      	ldr	r2, [r3, #32]
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	f042 0201 	orr.w	r2, r2, #1
 8000f0a:	621a      	str	r2, [r3, #32]
				CONF->TIMERx->CCMR1 |=(0b110<<4);
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	699a      	ldr	r2, [r3, #24]
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8000f1a:	619a      	str	r2, [r3, #24]
				CONF->TIMERx->CCR1=(AUTO_RELOAD*duty_cycle*10/1000);//duty cycle
 8000f1c:	6a3b      	ldr	r3, [r7, #32]
 8000f1e:	687a      	ldr	r2, [r7, #4]
 8000f20:	fb02 f203 	mul.w	r2, r2, r3
 8000f24:	4613      	mov	r3, r2
 8000f26:	009b      	lsls	r3, r3, #2
 8000f28:	4413      	add	r3, r2
 8000f2a:	005b      	lsls	r3, r3, #1
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	4a6c      	ldr	r2, [pc, #432]	; (80010e4 <PWM+0x4f8>)
 8000f34:	fba2 1201 	umull	r1, r2, r2, r1
 8000f38:	0992      	lsrs	r2, r2, #6
 8000f3a:	635a      	str	r2, [r3, #52]	; 0x34
				CONF->TIMERx->DIER |=(0b11<<0);
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	68da      	ldr	r2, [r3, #12]
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	f042 0203 	orr.w	r2, r2, #3
 8000f4a:	60da      	str	r2, [r3, #12]
 8000f4c:	e1e9      	b.n	8001322 <PWM+0x736>
			}
			else if(CH==2){
 8000f4e:	68bb      	ldr	r3, [r7, #8]
 8000f50:	2b02      	cmp	r3, #2
 8000f52:	d13d      	bne.n	8000fd0 <PWM+0x3e4>
				pin.GPIO_MODE =GPIO_ALT_OUTPUT_PUSHPULL_MODE;
 8000f54:	2306      	movs	r3, #6
 8000f56:	767b      	strb	r3, [r7, #25]
				pin.GPIO_Output_Speed =GPIO_SPEED_50M;
 8000f58:	2303      	movs	r3, #3
 8000f5a:	76bb      	strb	r3, [r7, #26]
				pin.GPIO_PinNumber=7 ;
 8000f5c:	2307      	movs	r3, #7
 8000f5e:	763b      	strb	r3, [r7, #24]
				pin.GPIO_Port =GPIOA;
 8000f60:	4b5f      	ldr	r3, [pc, #380]	; (80010e0 <PWM+0x4f4>)
 8000f62:	617b      	str	r3, [r7, #20]
				gpio_pin_intialize(&pin);
 8000f64:	f107 0314 	add.w	r3, r7, #20
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f7ff fbed 	bl	8000748 <gpio_pin_intialize>

				CONF->TIMERx->CCMR1 |=(1<<11);
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	699a      	ldr	r2, [r3, #24]
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000f7c:	619a      	str	r2, [r3, #24]
				CONF->TIMERx->CCER |=(1<<4);
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	6a1a      	ldr	r2, [r3, #32]
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	f042 0210 	orr.w	r2, r2, #16
 8000f8c:	621a      	str	r2, [r3, #32]
				CONF->TIMERx->CCMR1 |=(0b110<<12);
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	699a      	ldr	r2, [r3, #24]
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 8000f9c:	619a      	str	r2, [r3, #24]
				CONF->TIMERx->CCR2=(AUTO_RELOAD*duty_cycle*10/1000);//duty cycle
 8000f9e:	6a3b      	ldr	r3, [r7, #32]
 8000fa0:	687a      	ldr	r2, [r7, #4]
 8000fa2:	fb02 f203 	mul.w	r2, r2, r3
 8000fa6:	4613      	mov	r3, r2
 8000fa8:	009b      	lsls	r3, r3, #2
 8000faa:	4413      	add	r3, r2
 8000fac:	005b      	lsls	r3, r3, #1
 8000fae:	4619      	mov	r1, r3
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	4a4b      	ldr	r2, [pc, #300]	; (80010e4 <PWM+0x4f8>)
 8000fb6:	fba2 1201 	umull	r1, r2, r2, r1
 8000fba:	0992      	lsrs	r2, r2, #6
 8000fbc:	639a      	str	r2, [r3, #56]	; 0x38
				CONF->TIMERx->DIER |=(0b101<<0);
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	68da      	ldr	r2, [r3, #12]
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	f042 0205 	orr.w	r2, r2, #5
 8000fcc:	60da      	str	r2, [r3, #12]
 8000fce:	e1a8      	b.n	8001322 <PWM+0x736>
			}
			else if(CH==3){
 8000fd0:	68bb      	ldr	r3, [r7, #8]
 8000fd2:	2b03      	cmp	r3, #3
 8000fd4:	d13d      	bne.n	8001052 <PWM+0x466>
				pin.GPIO_MODE =GPIO_ALT_OUTPUT_PUSHPULL_MODE;
 8000fd6:	2306      	movs	r3, #6
 8000fd8:	767b      	strb	r3, [r7, #25]
				pin.GPIO_Output_Speed =GPIO_SPEED_50M;
 8000fda:	2303      	movs	r3, #3
 8000fdc:	76bb      	strb	r3, [r7, #26]
				pin.GPIO_PinNumber=0 ;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	763b      	strb	r3, [r7, #24]
				pin.GPIO_Port =GPIOB;
 8000fe2:	4b41      	ldr	r3, [pc, #260]	; (80010e8 <PWM+0x4fc>)
 8000fe4:	617b      	str	r3, [r7, #20]
				gpio_pin_intialize(&pin);
 8000fe6:	f107 0314 	add.w	r3, r7, #20
 8000fea:	4618      	mov	r0, r3
 8000fec:	f7ff fbac 	bl	8000748 <gpio_pin_intialize>

				CONF->TIMERx->CCMR2 |=(1<<3);
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	69da      	ldr	r2, [r3, #28]
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	f042 0208 	orr.w	r2, r2, #8
 8000ffe:	61da      	str	r2, [r3, #28]
				CONF->TIMERx->CCER |=(1<<8);
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	6a1a      	ldr	r2, [r3, #32]
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800100e:	621a      	str	r2, [r3, #32]
				CONF->TIMERx->CCMR2 |=(0b110<<4);
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	69da      	ldr	r2, [r3, #28]
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 800101e:	61da      	str	r2, [r3, #28]
				CONF->TIMERx->CCR3=(AUTO_RELOAD*duty_cycle*10/1000);//duty cycle
 8001020:	6a3b      	ldr	r3, [r7, #32]
 8001022:	687a      	ldr	r2, [r7, #4]
 8001024:	fb02 f203 	mul.w	r2, r2, r3
 8001028:	4613      	mov	r3, r2
 800102a:	009b      	lsls	r3, r3, #2
 800102c:	4413      	add	r3, r2
 800102e:	005b      	lsls	r3, r3, #1
 8001030:	4619      	mov	r1, r3
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	4a2b      	ldr	r2, [pc, #172]	; (80010e4 <PWM+0x4f8>)
 8001038:	fba2 1201 	umull	r1, r2, r2, r1
 800103c:	0992      	lsrs	r2, r2, #6
 800103e:	63da      	str	r2, [r3, #60]	; 0x3c
				CONF->TIMERx->DIER |=(0b1001<<0);
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	68da      	ldr	r2, [r3, #12]
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	f042 0209 	orr.w	r2, r2, #9
 800104e:	60da      	str	r2, [r3, #12]
 8001050:	e167      	b.n	8001322 <PWM+0x736>
			}
			else if(CH==4){
 8001052:	68bb      	ldr	r3, [r7, #8]
 8001054:	2b04      	cmp	r3, #4
 8001056:	f040 8164 	bne.w	8001322 <PWM+0x736>
				pin.GPIO_MODE =GPIO_ALT_OUTPUT_PUSHPULL_MODE;
 800105a:	2306      	movs	r3, #6
 800105c:	767b      	strb	r3, [r7, #25]
				pin.GPIO_Output_Speed =GPIO_SPEED_50M;
 800105e:	2303      	movs	r3, #3
 8001060:	76bb      	strb	r3, [r7, #26]
				pin.GPIO_PinNumber=1 ;
 8001062:	2301      	movs	r3, #1
 8001064:	763b      	strb	r3, [r7, #24]
				pin.GPIO_Port =GPIOA;
 8001066:	4b1e      	ldr	r3, [pc, #120]	; (80010e0 <PWM+0x4f4>)
 8001068:	617b      	str	r3, [r7, #20]
				gpio_pin_intialize(&pin);
 800106a:	f107 0314 	add.w	r3, r7, #20
 800106e:	4618      	mov	r0, r3
 8001070:	f7ff fb6a 	bl	8000748 <gpio_pin_intialize>

				CONF->TIMERx->CCMR2 |=(1<<11);
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	69da      	ldr	r2, [r3, #28]
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001082:	61da      	str	r2, [r3, #28]
				CONF->TIMERx->CCER |=(1<<12);
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	6a1a      	ldr	r2, [r3, #32]
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001092:	621a      	str	r2, [r3, #32]
				CONF->TIMERx->CCMR2 |=(0b110<<12);
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	69da      	ldr	r2, [r3, #28]
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 80010a2:	61da      	str	r2, [r3, #28]
				CONF->TIMERx->CCR4=(AUTO_RELOAD*duty_cycle*10/1000);//duty cycle
 80010a4:	6a3b      	ldr	r3, [r7, #32]
 80010a6:	687a      	ldr	r2, [r7, #4]
 80010a8:	fb02 f203 	mul.w	r2, r2, r3
 80010ac:	4613      	mov	r3, r2
 80010ae:	009b      	lsls	r3, r3, #2
 80010b0:	4413      	add	r3, r2
 80010b2:	005b      	lsls	r3, r3, #1
 80010b4:	4619      	mov	r1, r3
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	4a0a      	ldr	r2, [pc, #40]	; (80010e4 <PWM+0x4f8>)
 80010bc:	fba2 1201 	umull	r1, r2, r2, r1
 80010c0:	0992      	lsrs	r2, r2, #6
 80010c2:	641a      	str	r2, [r3, #64]	; 0x40
				CONF->TIMERx->DIER |=(0b10001<<0);
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	68da      	ldr	r2, [r3, #12]
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	f042 0211 	orr.w	r2, r2, #17
 80010d2:	60da      	str	r2, [r3, #12]
 80010d4:	e125      	b.n	8001322 <PWM+0x736>
 80010d6:	bf00      	nop
 80010d8:	40000400 	.word	0x40000400
 80010dc:	40021000 	.word	0x40021000
 80010e0:	40010800 	.word	0x40010800
 80010e4:	10624dd3 	.word	0x10624dd3
 80010e8:	40010c00 	.word	0x40010c00
		}


		//====================TIM4===================

		else if (CONF->TIMERx==TIM4){
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	4a9e      	ldr	r2, [pc, #632]	; (800136c <PWM+0x780>)
 80010f2:	4293      	cmp	r3, r2
 80010f4:	f040 8115 	bne.w	8001322 <PWM+0x736>
			RCC_TIMER4_Enable();//enable timer3 clock
 80010f8:	4b9d      	ldr	r3, [pc, #628]	; (8001370 <PWM+0x784>)
 80010fa:	69db      	ldr	r3, [r3, #28]
 80010fc:	4a9c      	ldr	r2, [pc, #624]	; (8001370 <PWM+0x784>)
 80010fe:	f043 0304 	orr.w	r3, r3, #4
 8001102:	61d3      	str	r3, [r2, #28]
			RCC_GPIOB_CLK_EN();
 8001104:	4b9a      	ldr	r3, [pc, #616]	; (8001370 <PWM+0x784>)
 8001106:	699b      	ldr	r3, [r3, #24]
 8001108:	4a99      	ldr	r2, [pc, #612]	; (8001370 <PWM+0x784>)
 800110a:	f043 0308 	orr.w	r3, r3, #8
 800110e:	6193      	str	r3, [r2, #24]
			RCC_AFIO_CLK_EN();
 8001110:	4b97      	ldr	r3, [pc, #604]	; (8001370 <PWM+0x784>)
 8001112:	699b      	ldr	r3, [r3, #24]
 8001114:	4a96      	ldr	r2, [pc, #600]	; (8001370 <PWM+0x784>)
 8001116:	f043 0301 	orr.w	r3, r3, #1
 800111a:	6193      	str	r3, [r2, #24]

			if(CH==1){
 800111c:	68bb      	ldr	r3, [r7, #8]
 800111e:	2b01      	cmp	r3, #1
 8001120:	d13d      	bne.n	800119e <PWM+0x5b2>
				pin.GPIO_MODE =GPIO_ALT_OUTPUT_PUSHPULL_MODE;
 8001122:	2306      	movs	r3, #6
 8001124:	767b      	strb	r3, [r7, #25]
				pin.GPIO_Output_Speed =GPIO_SPEED_50M;
 8001126:	2303      	movs	r3, #3
 8001128:	76bb      	strb	r3, [r7, #26]
				pin.GPIO_PinNumber=6 ;
 800112a:	2306      	movs	r3, #6
 800112c:	763b      	strb	r3, [r7, #24]
				pin.GPIO_Port =GPIOB;
 800112e:	4b91      	ldr	r3, [pc, #580]	; (8001374 <PWM+0x788>)
 8001130:	617b      	str	r3, [r7, #20]
				gpio_pin_intialize(&pin);
 8001132:	f107 0314 	add.w	r3, r7, #20
 8001136:	4618      	mov	r0, r3
 8001138:	f7ff fb06 	bl	8000748 <gpio_pin_intialize>

				CONF->TIMERx->CCMR1 |=(1<<3);
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	699a      	ldr	r2, [r3, #24]
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	f042 0208 	orr.w	r2, r2, #8
 800114a:	619a      	str	r2, [r3, #24]
				CONF->TIMERx->CCER |=(1<<0);
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	6a1a      	ldr	r2, [r3, #32]
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f042 0201 	orr.w	r2, r2, #1
 800115a:	621a      	str	r2, [r3, #32]
				CONF->TIMERx->CCMR1 |=(0b110<<4);
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	699a      	ldr	r2, [r3, #24]
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 800116a:	619a      	str	r2, [r3, #24]
				CONF->TIMERx->CCR1=(AUTO_RELOAD*duty_cycle*10/1000);//duty cycle
 800116c:	6a3b      	ldr	r3, [r7, #32]
 800116e:	687a      	ldr	r2, [r7, #4]
 8001170:	fb02 f203 	mul.w	r2, r2, r3
 8001174:	4613      	mov	r3, r2
 8001176:	009b      	lsls	r3, r3, #2
 8001178:	4413      	add	r3, r2
 800117a:	005b      	lsls	r3, r3, #1
 800117c:	4619      	mov	r1, r3
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	4a7d      	ldr	r2, [pc, #500]	; (8001378 <PWM+0x78c>)
 8001184:	fba2 1201 	umull	r1, r2, r2, r1
 8001188:	0992      	lsrs	r2, r2, #6
 800118a:	635a      	str	r2, [r3, #52]	; 0x34
				CONF->TIMERx->DIER |=(0b11<<0);
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	68da      	ldr	r2, [r3, #12]
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f042 0203 	orr.w	r2, r2, #3
 800119a:	60da      	str	r2, [r3, #12]
 800119c:	e0c1      	b.n	8001322 <PWM+0x736>
			}
			else if(CH==2){
 800119e:	68bb      	ldr	r3, [r7, #8]
 80011a0:	2b02      	cmp	r3, #2
 80011a2:	d13d      	bne.n	8001220 <PWM+0x634>
				pin.GPIO_MODE =GPIO_ALT_OUTPUT_PUSHPULL_MODE;
 80011a4:	2306      	movs	r3, #6
 80011a6:	767b      	strb	r3, [r7, #25]
				pin.GPIO_Output_Speed =GPIO_SPEED_50M;
 80011a8:	2303      	movs	r3, #3
 80011aa:	76bb      	strb	r3, [r7, #26]
				pin.GPIO_PinNumber=7 ;
 80011ac:	2307      	movs	r3, #7
 80011ae:	763b      	strb	r3, [r7, #24]
				pin.GPIO_Port =GPIOB;
 80011b0:	4b70      	ldr	r3, [pc, #448]	; (8001374 <PWM+0x788>)
 80011b2:	617b      	str	r3, [r7, #20]
				gpio_pin_intialize(&pin);
 80011b4:	f107 0314 	add.w	r3, r7, #20
 80011b8:	4618      	mov	r0, r3
 80011ba:	f7ff fac5 	bl	8000748 <gpio_pin_intialize>

				CONF->TIMERx->CCMR1 |=(1<<11);
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	699a      	ldr	r2, [r3, #24]
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80011cc:	619a      	str	r2, [r3, #24]
				CONF->TIMERx->CCER |=(1<<4);
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	6a1a      	ldr	r2, [r3, #32]
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	f042 0210 	orr.w	r2, r2, #16
 80011dc:	621a      	str	r2, [r3, #32]
				CONF->TIMERx->CCMR1 |=(0b110<<12);
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	699a      	ldr	r2, [r3, #24]
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 80011ec:	619a      	str	r2, [r3, #24]
				CONF->TIMERx->CCR2=(AUTO_RELOAD*duty_cycle*10/1000);//duty cycle
 80011ee:	6a3b      	ldr	r3, [r7, #32]
 80011f0:	687a      	ldr	r2, [r7, #4]
 80011f2:	fb02 f203 	mul.w	r2, r2, r3
 80011f6:	4613      	mov	r3, r2
 80011f8:	009b      	lsls	r3, r3, #2
 80011fa:	4413      	add	r3, r2
 80011fc:	005b      	lsls	r3, r3, #1
 80011fe:	4619      	mov	r1, r3
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	4a5c      	ldr	r2, [pc, #368]	; (8001378 <PWM+0x78c>)
 8001206:	fba2 1201 	umull	r1, r2, r2, r1
 800120a:	0992      	lsrs	r2, r2, #6
 800120c:	639a      	str	r2, [r3, #56]	; 0x38
				CONF->TIMERx->DIER |=(0b101<<0);
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	68da      	ldr	r2, [r3, #12]
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f042 0205 	orr.w	r2, r2, #5
 800121c:	60da      	str	r2, [r3, #12]
 800121e:	e080      	b.n	8001322 <PWM+0x736>
			}
			else if(CH==3){
 8001220:	68bb      	ldr	r3, [r7, #8]
 8001222:	2b03      	cmp	r3, #3
 8001224:	d13d      	bne.n	80012a2 <PWM+0x6b6>
				pin.GPIO_MODE =GPIO_ALT_OUTPUT_PUSHPULL_MODE;
 8001226:	2306      	movs	r3, #6
 8001228:	767b      	strb	r3, [r7, #25]
				pin.GPIO_Output_Speed =GPIO_SPEED_50M;
 800122a:	2303      	movs	r3, #3
 800122c:	76bb      	strb	r3, [r7, #26]
				pin.GPIO_PinNumber=8 ;
 800122e:	2308      	movs	r3, #8
 8001230:	763b      	strb	r3, [r7, #24]
				pin.GPIO_Port =GPIOB;
 8001232:	4b50      	ldr	r3, [pc, #320]	; (8001374 <PWM+0x788>)
 8001234:	617b      	str	r3, [r7, #20]
				gpio_pin_intialize(&pin);
 8001236:	f107 0314 	add.w	r3, r7, #20
 800123a:	4618      	mov	r0, r3
 800123c:	f7ff fa84 	bl	8000748 <gpio_pin_intialize>

				CONF->TIMERx->CCMR2 |=(1<<3);
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	69da      	ldr	r2, [r3, #28]
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f042 0208 	orr.w	r2, r2, #8
 800124e:	61da      	str	r2, [r3, #28]
				CONF->TIMERx->CCER |=(1<<8);
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	6a1a      	ldr	r2, [r3, #32]
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800125e:	621a      	str	r2, [r3, #32]
				CONF->TIMERx->CCMR2 |=(0b110<<4);
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	69da      	ldr	r2, [r3, #28]
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 800126e:	61da      	str	r2, [r3, #28]
				CONF->TIMERx->CCR3=(AUTO_RELOAD*duty_cycle*10/1000);//duty cycle
 8001270:	6a3b      	ldr	r3, [r7, #32]
 8001272:	687a      	ldr	r2, [r7, #4]
 8001274:	fb02 f203 	mul.w	r2, r2, r3
 8001278:	4613      	mov	r3, r2
 800127a:	009b      	lsls	r3, r3, #2
 800127c:	4413      	add	r3, r2
 800127e:	005b      	lsls	r3, r3, #1
 8001280:	4619      	mov	r1, r3
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	4a3c      	ldr	r2, [pc, #240]	; (8001378 <PWM+0x78c>)
 8001288:	fba2 1201 	umull	r1, r2, r2, r1
 800128c:	0992      	lsrs	r2, r2, #6
 800128e:	63da      	str	r2, [r3, #60]	; 0x3c
				CONF->TIMERx->DIER |=(0b1001<<0);
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	68da      	ldr	r2, [r3, #12]
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f042 0209 	orr.w	r2, r2, #9
 800129e:	60da      	str	r2, [r3, #12]
 80012a0:	e03f      	b.n	8001322 <PWM+0x736>
			}
			else if(CH==4){
 80012a2:	68bb      	ldr	r3, [r7, #8]
 80012a4:	2b04      	cmp	r3, #4
 80012a6:	d13c      	bne.n	8001322 <PWM+0x736>
				pin.GPIO_MODE =GPIO_ALT_OUTPUT_PUSHPULL_MODE;
 80012a8:	2306      	movs	r3, #6
 80012aa:	767b      	strb	r3, [r7, #25]
				pin.GPIO_Output_Speed =GPIO_SPEED_50M;
 80012ac:	2303      	movs	r3, #3
 80012ae:	76bb      	strb	r3, [r7, #26]
				pin.GPIO_PinNumber=9 ;
 80012b0:	2309      	movs	r3, #9
 80012b2:	763b      	strb	r3, [r7, #24]
				pin.GPIO_Port =GPIOB;
 80012b4:	4b2f      	ldr	r3, [pc, #188]	; (8001374 <PWM+0x788>)
 80012b6:	617b      	str	r3, [r7, #20]
				gpio_pin_intialize(&pin);
 80012b8:	f107 0314 	add.w	r3, r7, #20
 80012bc:	4618      	mov	r0, r3
 80012be:	f7ff fa43 	bl	8000748 <gpio_pin_intialize>

				CONF->TIMERx->CCMR2 |=(1<<11);
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	69da      	ldr	r2, [r3, #28]
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80012d0:	61da      	str	r2, [r3, #28]
				CONF->TIMERx->CCER |=(1<<12);
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	6a1a      	ldr	r2, [r3, #32]
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80012e0:	621a      	str	r2, [r3, #32]
				CONF->TIMERx->CCMR2 |=(0b110<<12);
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	69da      	ldr	r2, [r3, #28]
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 80012f0:	61da      	str	r2, [r3, #28]
				CONF->TIMERx->CCR4=(AUTO_RELOAD*duty_cycle*10/1000);//duty cycle
 80012f2:	6a3b      	ldr	r3, [r7, #32]
 80012f4:	687a      	ldr	r2, [r7, #4]
 80012f6:	fb02 f203 	mul.w	r2, r2, r3
 80012fa:	4613      	mov	r3, r2
 80012fc:	009b      	lsls	r3, r3, #2
 80012fe:	4413      	add	r3, r2
 8001300:	005b      	lsls	r3, r3, #1
 8001302:	4619      	mov	r1, r3
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4a1b      	ldr	r2, [pc, #108]	; (8001378 <PWM+0x78c>)
 800130a:	fba2 1201 	umull	r1, r2, r2, r1
 800130e:	0992      	lsrs	r2, r2, #6
 8001310:	641a      	str	r2, [r3, #64]	; 0x40
				CONF->TIMERx->DIER |=(0b10001<<0);
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	68da      	ldr	r2, [r3, #12]
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f042 0211 	orr.w	r2, r2, #17
 8001320:	60da      	str	r2, [r3, #12]
		}

	//	ARPE: Auto-reload preload enable
	//	0: TIMx_ARR register is not buffered
	//	1: TIMx_ARR register is buffered
	CONF->TIMERx->CR1 |=(1<<7);
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	681a      	ldr	r2, [r3, #0]
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001330:	601a      	str	r2, [r3, #0]


	//	110: PWM mode 1 - In upcounting, channel 1 is active as long as TIMx_CNT<TIMx_CCR1


	CONF->TIMERx->ARR=AUTO_RELOAD;//frec peak value
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	6a3a      	ldr	r2, [r7, #32]
 8001338:	62da      	str	r2, [r3, #44]	; 0x2c

	CONF->TIMERx->PSC=(PRESCALE-1);//prescaller
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	69fa      	ldr	r2, [r7, #28]
 8001340:	3a01      	subs	r2, #1
 8001342:	629a      	str	r2, [r3, #40]	; 0x28
	//	0: No action
	//	1: Reinitialize the counter and generates an update of the registers. Note that the prescaler
	//	counter is cleared too (anyway the prescaler ratio is not affected). The counter is cleared if
	//	the center-aligned mode is selected or if DIR=0 (upcounting), else it takes the auto-reload
	//	value (TIMx_ARR) if DIR=1 (downcounting).
	CONF->TIMERx->EGR |=(1<<0);
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	695a      	ldr	r2, [r3, #20]
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f042 0201 	orr.w	r2, r2, #1
 8001352:	615a      	str	r2, [r3, #20]
	//CONF->TIMERx->CCMR1 |=0b110<((CH - 1) * 4);
	CONF->TIMERx->CR1 |=(1<<0);//enable the timer
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	681a      	ldr	r2, [r3, #0]
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f042 0201 	orr.w	r2, r2, #1
 8001362:	601a      	str	r2, [r3, #0]

}
 8001364:	bf00      	nop
 8001366:	3728      	adds	r7, #40	; 0x28
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}
 800136c:	40000800 	.word	0x40000800
 8001370:	40021000 	.word	0x40021000
 8001374:	40010c00 	.word	0x40010c00
 8001378:	10624dd3 	.word	0x10624dd3

0800137c <MCAL_UART_Init>:
 * Note				-Support for Now Asynch mode & Clock 8 MHZ S

 /  */

void MCAL_UART_Init ( UART_Config* UART_Config)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b086      	sub	sp, #24
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
	uint32_t pclk ,BRR  ;

	//	enable the Clock for given USART peripheral
	if ( UART_Config->USARTx == USART1 ){
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4a78      	ldr	r2, [pc, #480]	; (800156c <MCAL_UART_Init+0x1f0>)
 800138a:	4293      	cmp	r3, r2
 800138c:	d10d      	bne.n	80013aa <MCAL_UART_Init+0x2e>
		RCC_USART1_CLK_EN();
 800138e:	4b78      	ldr	r3, [pc, #480]	; (8001570 <MCAL_UART_Init+0x1f4>)
 8001390:	699b      	ldr	r3, [r3, #24]
 8001392:	4a77      	ldr	r2, [pc, #476]	; (8001570 <MCAL_UART_Init+0x1f4>)
 8001394:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001398:	6193      	str	r3, [r2, #24]
		USART_INT_CALLBACK [0] = UART_Config->P_IRQ_CallBack;
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	695b      	ldr	r3, [r3, #20]
 800139e:	4a75      	ldr	r2, [pc, #468]	; (8001574 <MCAL_UART_Init+0x1f8>)
 80013a0:	6013      	str	r3, [r2, #0]
		pclk = MCAL_RCC_GetPCLK2Freq();
 80013a2:	f7ff fbfb 	bl	8000b9c <MCAL_RCC_GetPCLK2Freq>
 80013a6:	6178      	str	r0, [r7, #20]
 80013a8:	e024      	b.n	80013f4 <MCAL_UART_Init+0x78>
	}
	else if ( UART_Config->USARTx == USART2 ){
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	4a72      	ldr	r2, [pc, #456]	; (8001578 <MCAL_UART_Init+0x1fc>)
 80013b0:	4293      	cmp	r3, r2
 80013b2:	d10d      	bne.n	80013d0 <MCAL_UART_Init+0x54>
		RCC_USART2_CLK_EN();
 80013b4:	4b6e      	ldr	r3, [pc, #440]	; (8001570 <MCAL_UART_Init+0x1f4>)
 80013b6:	69db      	ldr	r3, [r3, #28]
 80013b8:	4a6d      	ldr	r2, [pc, #436]	; (8001570 <MCAL_UART_Init+0x1f4>)
 80013ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013be:	61d3      	str	r3, [r2, #28]
		USART_INT_CALLBACK [1] = UART_Config->P_IRQ_CallBack;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	695b      	ldr	r3, [r3, #20]
 80013c4:	4a6b      	ldr	r2, [pc, #428]	; (8001574 <MCAL_UART_Init+0x1f8>)
 80013c6:	6053      	str	r3, [r2, #4]
		pclk = MCAL_RCC_GetPCLK1Freq();
 80013c8:	f7ff fbd4 	bl	8000b74 <MCAL_RCC_GetPCLK1Freq>
 80013cc:	6178      	str	r0, [r7, #20]
 80013ce:	e011      	b.n	80013f4 <MCAL_UART_Init+0x78>
	}
	else if ( UART_Config->USARTx == USART3 ){
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	4a69      	ldr	r2, [pc, #420]	; (800157c <MCAL_UART_Init+0x200>)
 80013d6:	4293      	cmp	r3, r2
 80013d8:	d10c      	bne.n	80013f4 <MCAL_UART_Init+0x78>
		RCC_USART3_CLK_EN();
 80013da:	4b65      	ldr	r3, [pc, #404]	; (8001570 <MCAL_UART_Init+0x1f4>)
 80013dc:	69db      	ldr	r3, [r3, #28]
 80013de:	4a64      	ldr	r2, [pc, #400]	; (8001570 <MCAL_UART_Init+0x1f4>)
 80013e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013e4:	61d3      	str	r3, [r2, #28]
		USART_INT_CALLBACK [2] = UART_Config->P_IRQ_CallBack;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	695b      	ldr	r3, [r3, #20]
 80013ea:	4a62      	ldr	r2, [pc, #392]	; (8001574 <MCAL_UART_Init+0x1f8>)
 80013ec:	6093      	str	r3, [r2, #8]
		pclk = MCAL_RCC_GetPCLK1Freq();
 80013ee:	f7ff fbc1 	bl	8000b74 <MCAL_RCC_GetPCLK1Freq>
 80013f2:	6178      	str	r0, [r7, #20]
	}


	//Enable USART Module
	//	USART_CR1  Bit 13 UE: USART enable
	UART_Config->USARTx->CR1 |= 1<<13 ;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	68da      	ldr	r2, [r3, #12]
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001402:	60da      	str	r2, [r3, #12]

	//Enable USART Tx and Rx engines according to the USART_Mode configuration item
	//	USART_CR1 Bit 3 TE: Transmitter enable & Bit 2 RE: Receiver enable
	UART_Config->USARTx->CR1 |= UART_Config->USART_Mode ;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	68da      	ldr	r2, [r3, #12]
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	791b      	ldrb	r3, [r3, #4]
 800140e:	4619      	mov	r1, r3
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	430a      	orrs	r2, r1
 8001416:	60da      	str	r2, [r3, #12]

	//PAYLOAD Width
	// USARTx->CR1  Bit 12 M: Word length
	UART_Config->USARTx->CR1 |= UART_Config->Payload_Length ;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	68da      	ldr	r2, [r3, #12]
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	7b1b      	ldrb	r3, [r3, #12]
 8001422:	4619      	mov	r1, r3
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	430a      	orrs	r2, r1
 800142a:	60da      	str	r2, [r3, #12]

	//Configuration of parity control bit fields
	// USARTx->CR1 	Bit 10 PCE: Parity control enable     Bit 9 PS: Parity selection
	UART_Config->USARTx->CR1 |= UART_Config->Parity ;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	68da      	ldr	r2, [r3, #12]
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	7b5b      	ldrb	r3, [r3, #13]
 8001436:	4619      	mov	r1, r3
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	430a      	orrs	r2, r1
 800143e:	60da      	str	r2, [r3, #12]

	//configure the number of stop bits
	//USART_CR2  Bits 13:12 STOP: STOP bits
	UART_Config->USARTx->CR2 |= UART_Config->StopBits ;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	691a      	ldr	r2, [r3, #16]
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	7b9b      	ldrb	r3, [r3, #14]
 800144a:	4619      	mov	r1, r3
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	430a      	orrs	r2, r1
 8001452:	611a      	str	r2, [r3, #16]


	//USART hardware flow control
	//USART_CR3  Bit 9 CTSE: CTS enable   Bit 8 RTSE: RTS enable
	UART_Config->USARTx->CR3 |= UART_Config->HwFlowCtl ;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	695a      	ldr	r2, [r3, #20]
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	7bdb      	ldrb	r3, [r3, #15]
 800145e:	4619      	mov	r1, r3
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	430a      	orrs	r2, r1
 8001466:	615a      	str	r2, [r3, #20]

	BRR = UART_BRR_Register(pclk, UART_Config->BaudRate) ;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	689b      	ldr	r3, [r3, #8]
 800146c:	011b      	lsls	r3, r3, #4
 800146e:	697a      	ldr	r2, [r7, #20]
 8001470:	fbb2 f3f3 	udiv	r3, r2, r3
 8001474:	0119      	lsls	r1, r3, #4
 8001476:	697a      	ldr	r2, [r7, #20]
 8001478:	4613      	mov	r3, r2
 800147a:	009b      	lsls	r3, r3, #2
 800147c:	4413      	add	r3, r2
 800147e:	009a      	lsls	r2, r3, #2
 8001480:	441a      	add	r2, r3
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	689b      	ldr	r3, [r3, #8]
 8001486:	009b      	lsls	r3, r3, #2
 8001488:	fbb2 f2f3 	udiv	r2, r2, r3
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	689b      	ldr	r3, [r3, #8]
 8001490:	011b      	lsls	r3, r3, #4
 8001492:	6978      	ldr	r0, [r7, #20]
 8001494:	fbb0 f3f3 	udiv	r3, r0, r3
 8001498:	2064      	movs	r0, #100	; 0x64
 800149a:	fb00 f303 	mul.w	r3, r0, r3
 800149e:	1ad3      	subs	r3, r2, r3
 80014a0:	011b      	lsls	r3, r3, #4
 80014a2:	4a37      	ldr	r2, [pc, #220]	; (8001580 <MCAL_UART_Init+0x204>)
 80014a4:	fba2 2303 	umull	r2, r3, r2, r3
 80014a8:	095b      	lsrs	r3, r3, #5
 80014aa:	f003 030f 	and.w	r3, r3, #15
 80014ae:	430b      	orrs	r3, r1
 80014b0:	613b      	str	r3, [r7, #16]
	UART_Config->USARTx->BRR = BRR ;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	693a      	ldr	r2, [r7, #16]
 80014b8:	609a      	str	r2, [r3, #8]

	/* 9. ENABLE / DISABLE Interrupt */
	uint8_t interrupts =0;
 80014ba:	2300      	movs	r3, #0
 80014bc:	73fb      	strb	r3, [r7, #15]
	interrupts |= UART_Config->RXNEIE_IRQ_Enable
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	7c1b      	ldrb	r3, [r3, #16]
 80014c2:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80014c6:	b2db      	uxtb	r3, r3
 80014c8:	b25a      	sxtb	r2, r3
			| (UART_Config->TCIE_IRQ_Enable<<1)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	7c1b      	ldrb	r3, [r3, #16]
 80014ce:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80014d2:	b2db      	uxtb	r3, r3
 80014d4:	005b      	lsls	r3, r3, #1
 80014d6:	b25b      	sxtb	r3, r3
 80014d8:	4313      	orrs	r3, r2
 80014da:	b25a      	sxtb	r2, r3
			| (UART_Config->TXEIE_IRQ_Enable<<2)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	7c1b      	ldrb	r3, [r3, #16]
 80014e0:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80014e4:	b2db      	uxtb	r3, r3
 80014e6:	009b      	lsls	r3, r3, #2
 80014e8:	b25b      	sxtb	r3, r3
 80014ea:	4313      	orrs	r3, r2
 80014ec:	b25a      	sxtb	r2, r3
			| (UART_Config->PEIE_IRQ_Enable<<3);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	7c1b      	ldrb	r3, [r3, #16]
 80014f2:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80014f6:	b2db      	uxtb	r3, r3
 80014f8:	00db      	lsls	r3, r3, #3
 80014fa:	b25b      	sxtb	r3, r3
 80014fc:	4313      	orrs	r3, r2
 80014fe:	b25a      	sxtb	r2, r3
	interrupts |= UART_Config->RXNEIE_IRQ_Enable
 8001500:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001504:	4313      	orrs	r3, r2
 8001506:	b25b      	sxtb	r3, r3
 8001508:	73fb      	strb	r3, [r7, #15]
	UART_Config->USARTx->CR1 |=  interrupts<<5;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	68da      	ldr	r2, [r3, #12]
 8001510:	7bfb      	ldrb	r3, [r7, #15]
 8001512:	015b      	lsls	r3, r3, #5
 8001514:	4619      	mov	r1, r3
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	430a      	orrs	r2, r1
 800151c:	60da      	str	r2, [r3, #12]

	if (UART_Config->USARTx == USART1)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	4a12      	ldr	r2, [pc, #72]	; (800156c <MCAL_UART_Init+0x1f0>)
 8001524:	4293      	cmp	r3, r2
 8001526:	d106      	bne.n	8001536 <MCAL_UART_Init+0x1ba>
		NVIC_IRQ37_USART1_Enable;
 8001528:	4b16      	ldr	r3, [pc, #88]	; (8001584 <MCAL_UART_Init+0x208>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4a15      	ldr	r2, [pc, #84]	; (8001584 <MCAL_UART_Init+0x208>)
 800152e:	f043 0320 	orr.w	r3, r3, #32
 8001532:	6013      	str	r3, [r2, #0]
		NVIC_IRQ38_USART2_Enable;

	else if (UART_Config->USARTx == USART3)
		NVIC_IRQ39_USART3_Enable;

}
 8001534:	e016      	b.n	8001564 <MCAL_UART_Init+0x1e8>
	else if (UART_Config->USARTx == USART2)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	4a0f      	ldr	r2, [pc, #60]	; (8001578 <MCAL_UART_Init+0x1fc>)
 800153c:	4293      	cmp	r3, r2
 800153e:	d106      	bne.n	800154e <MCAL_UART_Init+0x1d2>
		NVIC_IRQ38_USART2_Enable;
 8001540:	4b10      	ldr	r3, [pc, #64]	; (8001584 <MCAL_UART_Init+0x208>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4a0f      	ldr	r2, [pc, #60]	; (8001584 <MCAL_UART_Init+0x208>)
 8001546:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800154a:	6013      	str	r3, [r2, #0]
}
 800154c:	e00a      	b.n	8001564 <MCAL_UART_Init+0x1e8>
	else if (UART_Config->USARTx == USART3)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4a0a      	ldr	r2, [pc, #40]	; (800157c <MCAL_UART_Init+0x200>)
 8001554:	4293      	cmp	r3, r2
 8001556:	d105      	bne.n	8001564 <MCAL_UART_Init+0x1e8>
		NVIC_IRQ39_USART3_Enable;
 8001558:	4b0a      	ldr	r3, [pc, #40]	; (8001584 <MCAL_UART_Init+0x208>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4a09      	ldr	r2, [pc, #36]	; (8001584 <MCAL_UART_Init+0x208>)
 800155e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001562:	6013      	str	r3, [r2, #0]
}
 8001564:	bf00      	nop
 8001566:	3718      	adds	r7, #24
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}
 800156c:	40013800 	.word	0x40013800
 8001570:	40021000 	.word	0x40021000
 8001574:	20000164 	.word	0x20000164
 8001578:	40004400 	.word	0x40004400
 800157c:	40004800 	.word	0x40004800
 8001580:	51eb851f 	.word	0x51eb851f
 8001584:	e000e104 	.word	0xe000e104

08001588 <MCAL_UART_SendData>:
 * 					- because it is replaced by the parity
 * 					- when receiving with the parity enabled the value read in the MSB bit is the received parity bit
 */

void MCAL_UART_SendData	(UART_Config* UART_Config, uint16_t *pTxBuffer,enum Polling_mechism PollingEn )
{
 8001588:	b480      	push	{r7}
 800158a:	b085      	sub	sp, #20
 800158c:	af00      	add	r7, sp, #0
 800158e:	60f8      	str	r0, [r7, #12]
 8001590:	60b9      	str	r1, [r7, #8]
 8001592:	4613      	mov	r3, r2
 8001594:	71fb      	strb	r3, [r7, #7]
	/* 1. Wait until TXE flag is set in the SR */
	if (PollingEn == enable)
 8001596:	79fb      	ldrb	r3, [r7, #7]
 8001598:	2b00      	cmp	r3, #0
 800159a:	d107      	bne.n	80015ac <MCAL_UART_SendData+0x24>
		 * The TXE bit is set by hardware and it indicates:
		 * The data has been moved from TDR to the shift register and the data transmission has started.
		 * The TDR register is empty.
		 * The next data can be written in the USART_DR register without overwriting the previous data.
		 */
		while (!(UART_Config->USARTx->SR & 1<<7));
 800159c:	bf00      	nop
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d0f8      	beq.n	800159e <MCAL_UART_SendData+0x16>
	 * the value written in the MSB (bit 7 or bit 8 depending on the data length) has no effect
	 * because it is replaced by the parity.
	 * When receiving with the parity enabled, the value read in the MSB bit is the received parity bit.
	 *
	 */
	if (UART_Config->Payload_Length == UART_Payload_Length_8B)
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	7b1b      	ldrb	r3, [r3, #12]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d106      	bne.n	80015c2 <MCAL_UART_SendData+0x3a>
	{
		UART_Config->USARTx->DR = (*pTxBuffer) & (uint8_t)0xFF ;
 80015b4:	68bb      	ldr	r3, [r7, #8]
 80015b6:	881b      	ldrh	r3, [r3, #0]
 80015b8:	461a      	mov	r2, r3
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	b2d2      	uxtb	r2, r2
 80015c0:	605a      	str	r2, [r3, #4]
	{
		UART_Config->USARTx->DR = (*pTxBuffer) & (uint16_t)0x1FF ;
	}


}
 80015c2:	bf00      	nop
 80015c4:	3714      	adds	r7, #20
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bc80      	pop	{r7}
 80015ca:	4770      	bx	lr

080015cc <MCAL_UART_GPIO_Set_Pins>:
 * @param[in]		- USARTx: where x can be (1..3 depending on device used)
 * @retval 			- None
 * @Notes			- Should enable the corresponding ALT & GPIO in RCC clock . Also called after MCAL_UART_Init()
 */
void MCAL_UART_GPIO_Set_Pins(UART_Config* UART_Config)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b084      	sub	sp, #16
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]

	GPIO_PinConfig_t Pin_Config;

	if (UART_Config->USARTx == USART1)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4a3c      	ldr	r2, [pc, #240]	; (80016cc <MCAL_UART_GPIO_Set_Pins+0x100>)
 80015da:	4293      	cmp	r3, r2
 80015dc:	d118      	bne.n	8001610 <MCAL_UART_GPIO_Set_Pins+0x44>
		// PA10 Rx
		// PA11 CTS
		// PA12 RTS

		// PA9 Tx
		Pin_Config.GPIO_PinNumber = GPIO_PIN_9;
 80015de:	2309      	movs	r3, #9
 80015e0:	733b      	strb	r3, [r7, #12]
		Pin_Config.GPIO_MODE = GPIO_ALT_OUTPUT_PUSHPULL_MODE;
 80015e2:	2306      	movs	r3, #6
 80015e4:	737b      	strb	r3, [r7, #13]
		Pin_Config.GPIO_Output_Speed = GPIO_SPEED_10M;
 80015e6:	2301      	movs	r3, #1
 80015e8:	73bb      	strb	r3, [r7, #14]
		Pin_Config.GPIO_Port= GPIOA;
 80015ea:	4b39      	ldr	r3, [pc, #228]	; (80016d0 <MCAL_UART_GPIO_Set_Pins+0x104>)
 80015ec:	60bb      	str	r3, [r7, #8]

		gpio_pin_intialize(&Pin_Config);
 80015ee:	f107 0308 	add.w	r3, r7, #8
 80015f2:	4618      	mov	r0, r3
 80015f4:	f7ff f8a8 	bl	8000748 <gpio_pin_intialize>

		// PA10 Rx
		Pin_Config.GPIO_PinNumber = GPIO_PIN_10;
 80015f8:	230a      	movs	r3, #10
 80015fa:	733b      	strb	r3, [r7, #12]
		Pin_Config.GPIO_MODE = GPIO_ALT_INPUT_MODE;
 80015fc:	2308      	movs	r3, #8
 80015fe:	737b      	strb	r3, [r7, #13]
		Pin_Config.GPIO_Port= GPIOA;
 8001600:	4b33      	ldr	r3, [pc, #204]	; (80016d0 <MCAL_UART_GPIO_Set_Pins+0x104>)
 8001602:	60bb      	str	r3, [r7, #8]
		gpio_pin_intialize(&Pin_Config);
 8001604:	f107 0308 	add.w	r3, r7, #8
 8001608:	4618      	mov	r0, r3
 800160a:	f7ff f89d 	bl	8000748 <gpio_pin_intialize>
			Pin_Config.GPIO_Output_Speed = GPIO_SPEED_10M;
			Pin_Config.GPIO_Port= GPIOA;
			gpio_pin_intialize( &Pin_Config);
		}
	}
}
 800160e:	e058      	b.n	80016c2 <MCAL_UART_GPIO_Set_Pins+0xf6>
	else if (UART_Config->USARTx == USART2)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4a2f      	ldr	r2, [pc, #188]	; (80016d4 <MCAL_UART_GPIO_Set_Pins+0x108>)
 8001616:	4293      	cmp	r3, r2
 8001618:	d127      	bne.n	800166a <MCAL_UART_GPIO_Set_Pins+0x9e>
		Pin_Config.GPIO_PinNumber = GPIO_PIN_2;
 800161a:	2302      	movs	r3, #2
 800161c:	733b      	strb	r3, [r7, #12]
		Pin_Config.GPIO_MODE = GPIO_ALT_OUTPUT_PUSHPULL_MODE;
 800161e:	2306      	movs	r3, #6
 8001620:	737b      	strb	r3, [r7, #13]
		Pin_Config.GPIO_Output_Speed = GPIO_SPEED_10M;
 8001622:	2301      	movs	r3, #1
 8001624:	73bb      	strb	r3, [r7, #14]
		Pin_Config.GPIO_Port= GPIOA;
 8001626:	4b2a      	ldr	r3, [pc, #168]	; (80016d0 <MCAL_UART_GPIO_Set_Pins+0x104>)
 8001628:	60bb      	str	r3, [r7, #8]
		gpio_pin_intialize( &Pin_Config);
 800162a:	f107 0308 	add.w	r3, r7, #8
 800162e:	4618      	mov	r0, r3
 8001630:	f7ff f88a 	bl	8000748 <gpio_pin_intialize>
		Pin_Config.GPIO_PinNumber = GPIO_PIN_3;
 8001634:	2303      	movs	r3, #3
 8001636:	733b      	strb	r3, [r7, #12]
		Pin_Config.GPIO_MODE = GPIO_ALT_INPUT_MODE;
 8001638:	2308      	movs	r3, #8
 800163a:	737b      	strb	r3, [r7, #13]
		Pin_Config.GPIO_Port= GPIOA;
 800163c:	4b24      	ldr	r3, [pc, #144]	; (80016d0 <MCAL_UART_GPIO_Set_Pins+0x104>)
 800163e:	60bb      	str	r3, [r7, #8]
		gpio_pin_intialize( &Pin_Config);
 8001640:	f107 0308 	add.w	r3, r7, #8
 8001644:	4618      	mov	r0, r3
 8001646:	f7ff f87f 	bl	8000748 <gpio_pin_intialize>
		if (UART_Config->HwFlowCtl || UART_Config->HwFlowCtl == UART_HwFlowCtl_CTS)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	7bdb      	ldrb	r3, [r3, #15]
 800164e:	2b00      	cmp	r3, #0
 8001650:	d037      	beq.n	80016c2 <MCAL_UART_GPIO_Set_Pins+0xf6>
			Pin_Config.GPIO_PinNumber = GPIO_PIN_0;
 8001652:	2300      	movs	r3, #0
 8001654:	733b      	strb	r3, [r7, #12]
			Pin_Config.GPIO_MODE = GPIO_FLOATING_INPUT_MODE;
 8001656:	2301      	movs	r3, #1
 8001658:	737b      	strb	r3, [r7, #13]
			Pin_Config.GPIO_Port= GPIOA;
 800165a:	4b1d      	ldr	r3, [pc, #116]	; (80016d0 <MCAL_UART_GPIO_Set_Pins+0x104>)
 800165c:	60bb      	str	r3, [r7, #8]
			gpio_pin_intialize( &Pin_Config);
 800165e:	f107 0308 	add.w	r3, r7, #8
 8001662:	4618      	mov	r0, r3
 8001664:	f7ff f870 	bl	8000748 <gpio_pin_intialize>
}
 8001668:	e02b      	b.n	80016c2 <MCAL_UART_GPIO_Set_Pins+0xf6>
	else if (UART_Config->USARTx == USART3)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	4a1a      	ldr	r2, [pc, #104]	; (80016d8 <MCAL_UART_GPIO_Set_Pins+0x10c>)
 8001670:	4293      	cmp	r3, r2
 8001672:	d126      	bne.n	80016c2 <MCAL_UART_GPIO_Set_Pins+0xf6>
		Pin_Config.GPIO_PinNumber = GPIO_PIN_10;
 8001674:	230a      	movs	r3, #10
 8001676:	733b      	strb	r3, [r7, #12]
		Pin_Config.GPIO_MODE = GPIO_ALT_OUTPUT_PUSHPULL_MODE;
 8001678:	2306      	movs	r3, #6
 800167a:	737b      	strb	r3, [r7, #13]
		Pin_Config.GPIO_Output_Speed = GPIO_SPEED_10M;
 800167c:	2301      	movs	r3, #1
 800167e:	73bb      	strb	r3, [r7, #14]
		Pin_Config.GPIO_Port= GPIOB;
 8001680:	4b16      	ldr	r3, [pc, #88]	; (80016dc <MCAL_UART_GPIO_Set_Pins+0x110>)
 8001682:	60bb      	str	r3, [r7, #8]
		gpio_pin_intialize( &Pin_Config);
 8001684:	f107 0308 	add.w	r3, r7, #8
 8001688:	4618      	mov	r0, r3
 800168a:	f7ff f85d 	bl	8000748 <gpio_pin_intialize>
		Pin_Config.GPIO_PinNumber = GPIO_PIN_11;
 800168e:	230b      	movs	r3, #11
 8001690:	733b      	strb	r3, [r7, #12]
		Pin_Config.GPIO_MODE = GPIO_ALT_INPUT_MODE;
 8001692:	2308      	movs	r3, #8
 8001694:	737b      	strb	r3, [r7, #13]
		Pin_Config.GPIO_Port= GPIOB;
 8001696:	4b11      	ldr	r3, [pc, #68]	; (80016dc <MCAL_UART_GPIO_Set_Pins+0x110>)
 8001698:	60bb      	str	r3, [r7, #8]
		gpio_pin_intialize( &Pin_Config);
 800169a:	f107 0308 	add.w	r3, r7, #8
 800169e:	4618      	mov	r0, r3
 80016a0:	f7ff f852 	bl	8000748 <gpio_pin_intialize>
		if (UART_Config->HwFlowCtl || UART_Config->HwFlowCtl == UART_HwFlowCtl_CTS)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	7bdb      	ldrb	r3, [r3, #15]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d00a      	beq.n	80016c2 <MCAL_UART_GPIO_Set_Pins+0xf6>
			Pin_Config.GPIO_PinNumber = GPIO_PIN_13;
 80016ac:	230d      	movs	r3, #13
 80016ae:	733b      	strb	r3, [r7, #12]
			Pin_Config.GPIO_MODE = GPIO_FLOATING_INPUT_MODE;
 80016b0:	2301      	movs	r3, #1
 80016b2:	737b      	strb	r3, [r7, #13]
			Pin_Config.GPIO_Port= GPIOB;
 80016b4:	4b09      	ldr	r3, [pc, #36]	; (80016dc <MCAL_UART_GPIO_Set_Pins+0x110>)
 80016b6:	60bb      	str	r3, [r7, #8]
			gpio_pin_intialize( &Pin_Config);
 80016b8:	f107 0308 	add.w	r3, r7, #8
 80016bc:	4618      	mov	r0, r3
 80016be:	f7ff f843 	bl	8000748 <gpio_pin_intialize>
}
 80016c2:	bf00      	nop
 80016c4:	3710      	adds	r7, #16
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	40013800 	.word	0x40013800
 80016d0:	40010800 	.word	0x40010800
 80016d4:	40004400 	.word	0x40004400
 80016d8:	40004800 	.word	0x40004800
 80016dc:	40010c00 	.word	0x40010c00

080016e0 <USART1_IRQHandler>:



void USART1_IRQHandler (void)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	af00      	add	r7, sp, #0
	USART_INT_CALLBACK [0]();
 80016e4:	4b02      	ldr	r3, [pc, #8]	; (80016f0 <USART1_IRQHandler+0x10>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4798      	blx	r3
}
 80016ea:	bf00      	nop
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	20000164 	.word	0x20000164

080016f4 <USART2_IRQHandler>:

void USART2_IRQHandler (void)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	af00      	add	r7, sp, #0
	USART_INT_CALLBACK [1]();
 80016f8:	4b02      	ldr	r3, [pc, #8]	; (8001704 <USART2_IRQHandler+0x10>)
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	4798      	blx	r3
}
 80016fe:	bf00      	nop
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	20000164 	.word	0x20000164

08001708 <USART3_IRQHandler>:

void USART3_IRQHandler (void)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	af00      	add	r7, sp, #0
	USART_INT_CALLBACK [2]();
 800170c:	4b02      	ldr	r3, [pc, #8]	; (8001718 <USART3_IRQHandler+0x10>)
 800170e:	689b      	ldr	r3, [r3, #8]
 8001710:	4798      	blx	r3
}
 8001712:	bf00      	nop
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	20000164 	.word	0x20000164

0800171c <ENTER_CALLBACK>:
		.TIMERx= TIM3,
		.CLOCK=8000000,
		.FREQUENCY=600
};

void ENTER_CALLBACK (){
 800171c:	b580      	push	{r7, lr}
 800171e:	af00      	add	r7, sp, #0
	Enter_Data=USART1->DR;
 8001720:	4b05      	ldr	r3, [pc, #20]	; (8001738 <ENTER_CALLBACK+0x1c>)
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	b2da      	uxtb	r2, r3
 8001726:	4b05      	ldr	r3, [pc, #20]	; (800173c <ENTER_CALLBACK+0x20>)
 8001728:	701a      	strb	r2, [r3, #0]
	MCAL_UART_SendData(&Enter, &Enter_Data, 1);
 800172a:	2201      	movs	r2, #1
 800172c:	4903      	ldr	r1, [pc, #12]	; (800173c <ENTER_CALLBACK+0x20>)
 800172e:	4804      	ldr	r0, [pc, #16]	; (8001740 <ENTER_CALLBACK+0x24>)
 8001730:	f7ff ff2a 	bl	8001588 <MCAL_UART_SendData>


}
 8001734:	bf00      	nop
 8001736:	bd80      	pop	{r7, pc}
 8001738:	40013800 	.word	0x40013800
 800173c:	200001c8 	.word	0x200001c8
 8001740:	200000a0 	.word	0x200000a0

08001744 <EXIT_CALLBACK>:
void EXIT_CALLBACK (){
 8001744:	b580      	push	{r7, lr}
 8001746:	af00      	add	r7, sp, #0

	Exit_Data=USART2->DR;
 8001748:	4b05      	ldr	r3, [pc, #20]	; (8001760 <EXIT_CALLBACK+0x1c>)
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	b2da      	uxtb	r2, r3
 800174e:	4b05      	ldr	r3, [pc, #20]	; (8001764 <EXIT_CALLBACK+0x20>)
 8001750:	701a      	strb	r2, [r3, #0]
	MCAL_UART_SendData(&Exit, &Exit_Data, 1);
 8001752:	2201      	movs	r2, #1
 8001754:	4903      	ldr	r1, [pc, #12]	; (8001764 <EXIT_CALLBACK+0x20>)
 8001756:	4804      	ldr	r0, [pc, #16]	; (8001768 <EXIT_CALLBACK+0x24>)
 8001758:	f7ff ff16 	bl	8001588 <MCAL_UART_SendData>

}
 800175c:	bf00      	nop
 800175e:	bd80      	pop	{r7, pc}
 8001760:	40004400 	.word	0x40004400
 8001764:	200001c7 	.word	0x200001c7
 8001768:	200000b8 	.word	0x200000b8

0800176c <main>:
int main(void)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	af00      	add	r7, sp, #0

	RCC_GPIOA_CLK_EN();
 8001770:	4b2d      	ldr	r3, [pc, #180]	; (8001828 <main+0xbc>)
 8001772:	699b      	ldr	r3, [r3, #24]
 8001774:	4a2c      	ldr	r2, [pc, #176]	; (8001828 <main+0xbc>)
 8001776:	f043 0304 	orr.w	r3, r3, #4
 800177a:	6193      	str	r3, [r2, #24]
	RCC_GPIOB_CLK_EN();
 800177c:	4b2a      	ldr	r3, [pc, #168]	; (8001828 <main+0xbc>)
 800177e:	699b      	ldr	r3, [r3, #24]
 8001780:	4a29      	ldr	r2, [pc, #164]	; (8001828 <main+0xbc>)
 8001782:	f043 0308 	orr.w	r3, r3, #8
 8001786:	6193      	str	r3, [r2, #24]
	RCC_AFIO_CLK_EN();
 8001788:	4b27      	ldr	r3, [pc, #156]	; (8001828 <main+0xbc>)
 800178a:	699b      	ldr	r3, [r3, #24]
 800178c:	4a26      	ldr	r2, [pc, #152]	; (8001828 <main+0xbc>)
 800178e:	f043 0301 	orr.w	r3, r3, #1
 8001792:	6193      	str	r3, [r2, #24]

	PWM(&PWM2, 1, 1);
 8001794:	2201      	movs	r2, #1
 8001796:	2101      	movs	r1, #1
 8001798:	4824      	ldr	r0, [pc, #144]	; (800182c <main+0xc0>)
 800179a:	f7ff fa27 	bl	8000bec <PWM>
	PWM(&PWM3, 2, 1);
 800179e:	2201      	movs	r2, #1
 80017a0:	2102      	movs	r1, #2
 80017a2:	4823      	ldr	r0, [pc, #140]	; (8001830 <main+0xc4>)
 80017a4:	f7ff fa22 	bl	8000bec <PWM>
	keypad_initialize(&keypad);
 80017a8:	4822      	ldr	r0, [pc, #136]	; (8001834 <main+0xc8>)
 80017aa:	f7fe fce1 	bl	8000170 <keypad_initialize>
	lcd_4bit_intialize(&ADMIN);
 80017ae:	4822      	ldr	r0, [pc, #136]	; (8001838 <main+0xcc>)
 80017b0:	f7fe fd62 	bl	8000278 <lcd_4bit_intialize>
	lcd_4bit_intialize(&DRIVER);
 80017b4:	4821      	ldr	r0, [pc, #132]	; (800183c <main+0xd0>)
 80017b6:	f7fe fd5f 	bl	8000278 <lcd_4bit_intialize>
	MCAL_UART_Init(&Enter);
 80017ba:	4821      	ldr	r0, [pc, #132]	; (8001840 <main+0xd4>)
 80017bc:	f7ff fdde 	bl	800137c <MCAL_UART_Init>
	MCAL_UART_GPIO_Set_Pins (&Enter);
 80017c0:	481f      	ldr	r0, [pc, #124]	; (8001840 <main+0xd4>)
 80017c2:	f7ff ff03 	bl	80015cc <MCAL_UART_GPIO_Set_Pins>
	MCAL_UART_Init(&Exit);
 80017c6:	481f      	ldr	r0, [pc, #124]	; (8001844 <main+0xd8>)
 80017c8:	f7ff fdd8 	bl	800137c <MCAL_UART_Init>
	MCAL_UART_GPIO_Set_Pins (&Exit);
 80017cc:	481d      	ldr	r0, [pc, #116]	; (8001844 <main+0xd8>)
 80017ce:	f7ff fefd 	bl	80015cc <MCAL_UART_GPIO_Set_Pins>


	GetValidIDs();
 80017d2:	f000 f843 	bl	800185c <GetValidIDs>
	while (1){

		lcd_4bit_send_command(&DRIVER, _LCD_CLEAR);
 80017d6:	2101      	movs	r1, #1
 80017d8:	4818      	ldr	r0, [pc, #96]	; (800183c <main+0xd0>)
 80017da:	f7fe fda7 	bl	800032c <lcd_4bit_send_command>
		lcd_4bit_send_string(&DRIVER,"Enter Your ID :  ");
 80017de:	491a      	ldr	r1, [pc, #104]	; (8001848 <main+0xdc>)
 80017e0:	4816      	ldr	r0, [pc, #88]	; (800183c <main+0xd0>)
 80017e2:	f7fe fe13 	bl	800040c <lcd_4bit_send_string>

		while(Enter_Data ==0&& Exit_Data ==0);
 80017e6:	bf00      	nop
 80017e8:	4b18      	ldr	r3, [pc, #96]	; (800184c <main+0xe0>)
 80017ea:	781b      	ldrb	r3, [r3, #0]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d103      	bne.n	80017f8 <main+0x8c>
 80017f0:	4b17      	ldr	r3, [pc, #92]	; (8001850 <main+0xe4>)
 80017f2:	781b      	ldrb	r3, [r3, #0]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d0f7      	beq.n	80017e8 <main+0x7c>
		if(Check_In_ID())
 80017f8:	f000 f876 	bl	80018e8 <Check_In_ID>
 80017fc:	4603      	mov	r3, r0
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d005      	beq.n	800180e <main+0xa2>
			Control_Gate(&PWM2, &RIP1, 1,1);
 8001802:	2301      	movs	r3, #1
 8001804:	2201      	movs	r2, #1
 8001806:	4913      	ldr	r1, [pc, #76]	; (8001854 <main+0xe8>)
 8001808:	4808      	ldr	r0, [pc, #32]	; (800182c <main+0xc0>)
 800180a:	f000 f94d 	bl	8001aa8 <Control_Gate>

		if(Check_Out_ID())
 800180e:	f000 f8db 	bl	80019c8 <Check_Out_ID>
 8001812:	4603      	mov	r3, r0
 8001814:	2b00      	cmp	r3, #0
 8001816:	d0de      	beq.n	80017d6 <main+0x6a>
			Control_Gate(&PWM3, &RIP2, 1,2);
 8001818:	2302      	movs	r3, #2
 800181a:	2201      	movs	r2, #1
 800181c:	490e      	ldr	r1, [pc, #56]	; (8001858 <main+0xec>)
 800181e:	4804      	ldr	r0, [pc, #16]	; (8001830 <main+0xc4>)
 8001820:	f000 f942 	bl	8001aa8 <Control_Gate>
		lcd_4bit_send_command(&DRIVER, _LCD_CLEAR);
 8001824:	e7d7      	b.n	80017d6 <main+0x6a>
 8001826:	bf00      	nop
 8001828:	40021000 	.word	0x40021000
 800182c:	200000e0 	.word	0x200000e0
 8001830:	200000ec 	.word	0x200000ec
 8001834:	20000000 	.word	0x20000000
 8001838:	20000040 	.word	0x20000040
 800183c:	20000070 	.word	0x20000070
 8001840:	200000a0 	.word	0x200000a0
 8001844:	200000b8 	.word	0x200000b8
 8001848:	08001bd4 	.word	0x08001bd4
 800184c:	200001c8 	.word	0x200001c8
 8001850:	200001c7 	.word	0x200001c7
 8001854:	200000d0 	.word	0x200000d0
 8001858:	200000d8 	.word	0x200000d8

0800185c <GetValidIDs>:
	}
}



void GetValidIDs (){
 800185c:	b580      	push	{r7, lr}
 800185e:	b082      	sub	sp, #8
 8001860:	af00      	add	r7, sp, #0

	lcd_4bit_send_string(&ADMIN, "Valid IDs Are :  ");
 8001862:	491c      	ldr	r1, [pc, #112]	; (80018d4 <GetValidIDs+0x78>)
 8001864:	481c      	ldr	r0, [pc, #112]	; (80018d8 <GetValidIDs+0x7c>)
 8001866:	f7fe fdd1 	bl	800040c <lcd_4bit_send_string>
	for ( int i = 0;  i < N_ID; ++ i) {
 800186a:	2300      	movs	r3, #0
 800186c:	607b      	str	r3, [r7, #4]
 800186e:	e029      	b.n	80018c4 <GetValidIDs+0x68>
		ValidIDs[i]=keypad_get_value_blocking(&keypad);
 8001870:	481a      	ldr	r0, [pc, #104]	; (80018dc <GetValidIDs+0x80>)
 8001872:	f7fe fcab 	bl	80001cc <keypad_get_value_blocking>
 8001876:	4603      	mov	r3, r0
 8001878:	4619      	mov	r1, r3
 800187a:	4a19      	ldr	r2, [pc, #100]	; (80018e0 <GetValidIDs+0x84>)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	4413      	add	r3, r2
 8001880:	460a      	mov	r2, r1
 8001882:	701a      	strb	r2, [r3, #0]




		Garage_List[i].ID =ValidIDs[i];
 8001884:	4a16      	ldr	r2, [pc, #88]	; (80018e0 <GetValidIDs+0x84>)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	4413      	add	r3, r2
 800188a:	781b      	ldrb	r3, [r3, #0]
 800188c:	b2db      	uxtb	r3, r3
 800188e:	4619      	mov	r1, r3
 8001890:	4a14      	ldr	r2, [pc, #80]	; (80018e4 <GetValidIDs+0x88>)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
		Garage_List[i].state =OUT_GARAGE;
 8001898:	4a12      	ldr	r2, [pc, #72]	; (80018e4 <GetValidIDs+0x88>)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	00db      	lsls	r3, r3, #3
 800189e:	4413      	add	r3, r2
 80018a0:	2201      	movs	r2, #1
 80018a2:	711a      	strb	r2, [r3, #4]
		lcd_4bit_send_char_data(&ADMIN, ValidIDs[i]);
 80018a4:	4a0e      	ldr	r2, [pc, #56]	; (80018e0 <GetValidIDs+0x84>)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	4413      	add	r3, r2
 80018aa:	781b      	ldrb	r3, [r3, #0]
 80018ac:	b2db      	uxtb	r3, r3
 80018ae:	4619      	mov	r1, r3
 80018b0:	4809      	ldr	r0, [pc, #36]	; (80018d8 <GetValidIDs+0x7c>)
 80018b2:	f7fe fd79 	bl	80003a8 <lcd_4bit_send_char_data>
		lcd_4bit_send_char_data(&ADMIN, ' ');
 80018b6:	2120      	movs	r1, #32
 80018b8:	4807      	ldr	r0, [pc, #28]	; (80018d8 <GetValidIDs+0x7c>)
 80018ba:	f7fe fd75 	bl	80003a8 <lcd_4bit_send_char_data>
	for ( int i = 0;  i < N_ID; ++ i) {
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	3301      	adds	r3, #1
 80018c2:	607b      	str	r3, [r7, #4]
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	2b02      	cmp	r3, #2
 80018c8:	ddd2      	ble.n	8001870 <GetValidIDs+0x14>
	}

}
 80018ca:	bf00      	nop
 80018cc:	3708      	adds	r7, #8
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	08001be8 	.word	0x08001be8
 80018d8:	20000040 	.word	0x20000040
 80018dc:	20000000 	.word	0x20000000
 80018e0:	200001c4 	.word	0x200001c4
 80018e4:	200001ac 	.word	0x200001ac

080018e8 <Check_In_ID>:

Std_ReturnType Check_In_ID (){
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b082      	sub	sp, #8
 80018ec:	af00      	add	r7, sp, #0
	if(Enter_Data != 0){
 80018ee:	4b2f      	ldr	r3, [pc, #188]	; (80019ac <Check_In_ID+0xc4>)
 80018f0:	781b      	ldrb	r3, [r3, #0]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d055      	beq.n	80019a2 <Check_In_ID+0xba>
		for ( int i = 0;  i < N_ID; i++) {
 80018f6:	2300      	movs	r3, #0
 80018f8:	607b      	str	r3, [r7, #4]
 80018fa:	e036      	b.n	800196a <Check_In_ID+0x82>
			if (Enter_Data == ValidIDs[i]) {
 80018fc:	4a2c      	ldr	r2, [pc, #176]	; (80019b0 <Check_In_ID+0xc8>)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	4413      	add	r3, r2
 8001902:	781b      	ldrb	r3, [r3, #0]
 8001904:	b2da      	uxtb	r2, r3
 8001906:	4b29      	ldr	r3, [pc, #164]	; (80019ac <Check_In_ID+0xc4>)
 8001908:	781b      	ldrb	r3, [r3, #0]
 800190a:	429a      	cmp	r2, r3
 800190c:	d12a      	bne.n	8001964 <Check_In_ID+0x7c>
				if (Garage_List[i].state== IN_GARAGE) {
 800190e:	4a29      	ldr	r2, [pc, #164]	; (80019b4 <Check_In_ID+0xcc>)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	00db      	lsls	r3, r3, #3
 8001914:	4413      	add	r3, r2
 8001916:	791b      	ldrb	r3, [r3, #4]
 8001918:	2b00      	cmp	r3, #0
 800191a:	d110      	bne.n	800193e <Check_In_ID+0x56>
					lcd_4bit_send_command(&DRIVER, _LCD_CLEAR);
 800191c:	2101      	movs	r1, #1
 800191e:	4826      	ldr	r0, [pc, #152]	; (80019b8 <Check_In_ID+0xd0>)
 8001920:	f7fe fd04 	bl	800032c <lcd_4bit_send_command>
					lcd_4bit_send_string(&DRIVER, "Already In");
 8001924:	4925      	ldr	r1, [pc, #148]	; (80019bc <Check_In_ID+0xd4>)
 8001926:	4824      	ldr	r0, [pc, #144]	; (80019b8 <Check_In_ID+0xd0>)
 8001928:	f7fe fd70 	bl	800040c <lcd_4bit_send_string>
					Enter_Data=0;
 800192c:	4b1f      	ldr	r3, [pc, #124]	; (80019ac <Check_In_ID+0xc4>)
 800192e:	2200      	movs	r2, #0
 8001930:	701a      	strb	r2, [r3, #0]
					delay_ms(500);
 8001932:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001936:	f7fe ffd7 	bl	80008e8 <delay_ms>
					return E_NOT_OK;
 800193a:	2300      	movs	r3, #0
 800193c:	e031      	b.n	80019a2 <Check_In_ID+0xba>
				}
				else{
					Garage_List[i].state =IN_GARAGE;
 800193e:	4a1d      	ldr	r2, [pc, #116]	; (80019b4 <Check_In_ID+0xcc>)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	00db      	lsls	r3, r3, #3
 8001944:	4413      	add	r3, r2
 8001946:	2200      	movs	r2, #0
 8001948:	711a      	strb	r2, [r3, #4]
					lcd_4bit_send_command(&DRIVER, _LCD_CLEAR);
 800194a:	2101      	movs	r1, #1
 800194c:	481a      	ldr	r0, [pc, #104]	; (80019b8 <Check_In_ID+0xd0>)
 800194e:	f7fe fced 	bl	800032c <lcd_4bit_send_command>
					lcd_4bit_send_string(&DRIVER, "WELCOME");
 8001952:	491b      	ldr	r1, [pc, #108]	; (80019c0 <Check_In_ID+0xd8>)
 8001954:	4818      	ldr	r0, [pc, #96]	; (80019b8 <Check_In_ID+0xd0>)
 8001956:	f7fe fd59 	bl	800040c <lcd_4bit_send_string>
					Enter_Data=0;
 800195a:	4b14      	ldr	r3, [pc, #80]	; (80019ac <Check_In_ID+0xc4>)
 800195c:	2200      	movs	r2, #0
 800195e:	701a      	strb	r2, [r3, #0]
					return E_OK;
 8001960:	2301      	movs	r3, #1
 8001962:	e01e      	b.n	80019a2 <Check_In_ID+0xba>
		for ( int i = 0;  i < N_ID; i++) {
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	3301      	adds	r3, #1
 8001968:	607b      	str	r3, [r7, #4]
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	2b02      	cmp	r3, #2
 800196e:	ddc5      	ble.n	80018fc <Check_In_ID+0x14>
				}
			}
		}
		if (Enter_Data ==0 ||Enter_Data =='/0'||Enter_Data =='0') {}
 8001970:	4b0e      	ldr	r3, [pc, #56]	; (80019ac <Check_In_ID+0xc4>)
 8001972:	781b      	ldrb	r3, [r3, #0]
 8001974:	2b00      	cmp	r3, #0
 8001976:	d014      	beq.n	80019a2 <Check_In_ID+0xba>
 8001978:	4b0c      	ldr	r3, [pc, #48]	; (80019ac <Check_In_ID+0xc4>)
 800197a:	781b      	ldrb	r3, [r3, #0]
 800197c:	2b30      	cmp	r3, #48	; 0x30
 800197e:	d010      	beq.n	80019a2 <Check_In_ID+0xba>
		else{
			lcd_4bit_send_command(&DRIVER, _LCD_CLEAR);
 8001980:	2101      	movs	r1, #1
 8001982:	480d      	ldr	r0, [pc, #52]	; (80019b8 <Check_In_ID+0xd0>)
 8001984:	f7fe fcd2 	bl	800032c <lcd_4bit_send_command>
			lcd_4bit_send_string(&DRIVER, "Wrong ,Try Again");
 8001988:	490e      	ldr	r1, [pc, #56]	; (80019c4 <Check_In_ID+0xdc>)
 800198a:	480b      	ldr	r0, [pc, #44]	; (80019b8 <Check_In_ID+0xd0>)
 800198c:	f7fe fd3e 	bl	800040c <lcd_4bit_send_string>
			Enter_Data=0;
 8001990:	4b06      	ldr	r3, [pc, #24]	; (80019ac <Check_In_ID+0xc4>)
 8001992:	2200      	movs	r2, #0
 8001994:	701a      	strb	r2, [r3, #0]
			delay_ms(500);
 8001996:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800199a:	f7fe ffa5 	bl	80008e8 <delay_ms>
			return E_NOT_OK;
 800199e:	2300      	movs	r3, #0
 80019a0:	e7ff      	b.n	80019a2 <Check_In_ID+0xba>

		}
	}
}
 80019a2:	4618      	mov	r0, r3
 80019a4:	3708      	adds	r7, #8
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	200001c8 	.word	0x200001c8
 80019b0:	200001c4 	.word	0x200001c4
 80019b4:	200001ac 	.word	0x200001ac
 80019b8:	20000070 	.word	0x20000070
 80019bc:	08001bfc 	.word	0x08001bfc
 80019c0:	08001c08 	.word	0x08001c08
 80019c4:	08001c10 	.word	0x08001c10

080019c8 <Check_Out_ID>:

Std_ReturnType Check_Out_ID(){
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b082      	sub	sp, #8
 80019cc:	af00      	add	r7, sp, #0
	if(Exit_Data != 0){
 80019ce:	4b2f      	ldr	r3, [pc, #188]	; (8001a8c <Check_Out_ID+0xc4>)
 80019d0:	781b      	ldrb	r3, [r3, #0]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d055      	beq.n	8001a82 <Check_Out_ID+0xba>
		for ( int i = 0;  i < N_ID; i++) {
 80019d6:	2300      	movs	r3, #0
 80019d8:	607b      	str	r3, [r7, #4]
 80019da:	e036      	b.n	8001a4a <Check_Out_ID+0x82>
			if (Exit_Data == ValidIDs[i]) {
 80019dc:	4a2c      	ldr	r2, [pc, #176]	; (8001a90 <Check_Out_ID+0xc8>)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	4413      	add	r3, r2
 80019e2:	781b      	ldrb	r3, [r3, #0]
 80019e4:	b2da      	uxtb	r2, r3
 80019e6:	4b29      	ldr	r3, [pc, #164]	; (8001a8c <Check_Out_ID+0xc4>)
 80019e8:	781b      	ldrb	r3, [r3, #0]
 80019ea:	429a      	cmp	r2, r3
 80019ec:	d12a      	bne.n	8001a44 <Check_Out_ID+0x7c>
				if (Garage_List[i].state== OUT_GARAGE) {
 80019ee:	4a29      	ldr	r2, [pc, #164]	; (8001a94 <Check_Out_ID+0xcc>)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	00db      	lsls	r3, r3, #3
 80019f4:	4413      	add	r3, r2
 80019f6:	791b      	ldrb	r3, [r3, #4]
 80019f8:	2b01      	cmp	r3, #1
 80019fa:	d110      	bne.n	8001a1e <Check_Out_ID+0x56>
					lcd_4bit_send_command(&DRIVER, _LCD_CLEAR);
 80019fc:	2101      	movs	r1, #1
 80019fe:	4826      	ldr	r0, [pc, #152]	; (8001a98 <Check_Out_ID+0xd0>)
 8001a00:	f7fe fc94 	bl	800032c <lcd_4bit_send_command>
					lcd_4bit_send_string(&DRIVER, "Already Out");
 8001a04:	4925      	ldr	r1, [pc, #148]	; (8001a9c <Check_Out_ID+0xd4>)
 8001a06:	4824      	ldr	r0, [pc, #144]	; (8001a98 <Check_Out_ID+0xd0>)
 8001a08:	f7fe fd00 	bl	800040c <lcd_4bit_send_string>
					Exit_Data=0;
 8001a0c:	4b1f      	ldr	r3, [pc, #124]	; (8001a8c <Check_Out_ID+0xc4>)
 8001a0e:	2200      	movs	r2, #0
 8001a10:	701a      	strb	r2, [r3, #0]
					delay_ms(500);
 8001a12:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001a16:	f7fe ff67 	bl	80008e8 <delay_ms>
					return E_NOT_OK;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	e031      	b.n	8001a82 <Check_Out_ID+0xba>
				}
				else{
					Garage_List[i].state =OUT_GARAGE;
 8001a1e:	4a1d      	ldr	r2, [pc, #116]	; (8001a94 <Check_Out_ID+0xcc>)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	00db      	lsls	r3, r3, #3
 8001a24:	4413      	add	r3, r2
 8001a26:	2201      	movs	r2, #1
 8001a28:	711a      	strb	r2, [r3, #4]
					lcd_4bit_send_command(&DRIVER, _LCD_CLEAR);
 8001a2a:	2101      	movs	r1, #1
 8001a2c:	481a      	ldr	r0, [pc, #104]	; (8001a98 <Check_Out_ID+0xd0>)
 8001a2e:	f7fe fc7d 	bl	800032c <lcd_4bit_send_command>
					lcd_4bit_send_string(&DRIVER, "BYE");
 8001a32:	491b      	ldr	r1, [pc, #108]	; (8001aa0 <Check_Out_ID+0xd8>)
 8001a34:	4818      	ldr	r0, [pc, #96]	; (8001a98 <Check_Out_ID+0xd0>)
 8001a36:	f7fe fce9 	bl	800040c <lcd_4bit_send_string>
					Exit_Data=0;
 8001a3a:	4b14      	ldr	r3, [pc, #80]	; (8001a8c <Check_Out_ID+0xc4>)
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	701a      	strb	r2, [r3, #0]
					return E_OK;
 8001a40:	2301      	movs	r3, #1
 8001a42:	e01e      	b.n	8001a82 <Check_Out_ID+0xba>
		for ( int i = 0;  i < N_ID; i++) {
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	3301      	adds	r3, #1
 8001a48:	607b      	str	r3, [r7, #4]
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	2b02      	cmp	r3, #2
 8001a4e:	ddc5      	ble.n	80019dc <Check_Out_ID+0x14>
				}
			}
		}
		if (Exit_Data ==0 ||Exit_Data =='/0'||Exit_Data =='0') {}
 8001a50:	4b0e      	ldr	r3, [pc, #56]	; (8001a8c <Check_Out_ID+0xc4>)
 8001a52:	781b      	ldrb	r3, [r3, #0]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d014      	beq.n	8001a82 <Check_Out_ID+0xba>
 8001a58:	4b0c      	ldr	r3, [pc, #48]	; (8001a8c <Check_Out_ID+0xc4>)
 8001a5a:	781b      	ldrb	r3, [r3, #0]
 8001a5c:	2b30      	cmp	r3, #48	; 0x30
 8001a5e:	d010      	beq.n	8001a82 <Check_Out_ID+0xba>
		else{
			lcd_4bit_send_command(&DRIVER, _LCD_CLEAR);
 8001a60:	2101      	movs	r1, #1
 8001a62:	480d      	ldr	r0, [pc, #52]	; (8001a98 <Check_Out_ID+0xd0>)
 8001a64:	f7fe fc62 	bl	800032c <lcd_4bit_send_command>
			lcd_4bit_send_string(&DRIVER, "Wrong ,Try Again");
 8001a68:	490e      	ldr	r1, [pc, #56]	; (8001aa4 <Check_Out_ID+0xdc>)
 8001a6a:	480b      	ldr	r0, [pc, #44]	; (8001a98 <Check_Out_ID+0xd0>)
 8001a6c:	f7fe fcce 	bl	800040c <lcd_4bit_send_string>
			Exit_Data=0;
 8001a70:	4b06      	ldr	r3, [pc, #24]	; (8001a8c <Check_Out_ID+0xc4>)
 8001a72:	2200      	movs	r2, #0
 8001a74:	701a      	strb	r2, [r3, #0]
			delay_ms(500);
 8001a76:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001a7a:	f7fe ff35 	bl	80008e8 <delay_ms>
			return E_NOT_OK;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	e7ff      	b.n	8001a82 <Check_Out_ID+0xba>

		}}
}
 8001a82:	4618      	mov	r0, r3
 8001a84:	3708      	adds	r7, #8
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}
 8001a8a:	bf00      	nop
 8001a8c:	200001c7 	.word	0x200001c7
 8001a90:	200001c4 	.word	0x200001c4
 8001a94:	200001ac 	.word	0x200001ac
 8001a98:	20000070 	.word	0x20000070
 8001a9c:	08001c24 	.word	0x08001c24
 8001aa0:	08001c30 	.word	0x08001c30
 8001aa4:	08001c10 	.word	0x08001c10

08001aa8 <Control_Gate>:

void Control_Gate(TIMER_t *SERVO,GPIO_PinConfig_t * SENSOR, uint32_t State,uint32_t CH ){
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b084      	sub	sp, #16
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	60f8      	str	r0, [r7, #12]
 8001ab0:	60b9      	str	r1, [r7, #8]
 8001ab2:	607a      	str	r2, [r7, #4]
 8001ab4:	603b      	str	r3, [r7, #0]
	if(State){
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d027      	beq.n	8001b0c <Control_Gate+0x64>
		while(!gpio_pin_read_logic(SENSOR));
 8001abc:	bf00      	nop
 8001abe:	68b8      	ldr	r0, [r7, #8]
 8001ac0:	f7fe fed6 	bl	8000870 <gpio_pin_read_logic>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d0f9      	beq.n	8001abe <Control_Gate+0x16>
		lcd_4bit_send_command(&DRIVER, _LCD_CLEAR);
 8001aca:	2101      	movs	r1, #1
 8001acc:	4811      	ldr	r0, [pc, #68]	; (8001b14 <Control_Gate+0x6c>)
 8001ace:	f7fe fc2d 	bl	800032c <lcd_4bit_send_command>
		lcd_4bit_send_string(&DRIVER, "Open Gate");
 8001ad2:	4911      	ldr	r1, [pc, #68]	; (8001b18 <Control_Gate+0x70>)
 8001ad4:	480f      	ldr	r0, [pc, #60]	; (8001b14 <Control_Gate+0x6c>)
 8001ad6:	f7fe fc99 	bl	800040c <lcd_4bit_send_string>
		PWM(SERVO, CH, 75); //45 degree
 8001ada:	224b      	movs	r2, #75	; 0x4b
 8001adc:	6839      	ldr	r1, [r7, #0]
 8001ade:	68f8      	ldr	r0, [r7, #12]
 8001ae0:	f7ff f884 	bl	8000bec <PWM>
		while(gpio_pin_read_logic(SENSOR));
 8001ae4:	bf00      	nop
 8001ae6:	68b8      	ldr	r0, [r7, #8]
 8001ae8:	f7fe fec2 	bl	8000870 <gpio_pin_read_logic>
 8001aec:	4603      	mov	r3, r0
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d1f9      	bne.n	8001ae6 <Control_Gate+0x3e>
		lcd_4bit_send_command(&DRIVER, _LCD_CLEAR);
 8001af2:	2101      	movs	r1, #1
 8001af4:	4807      	ldr	r0, [pc, #28]	; (8001b14 <Control_Gate+0x6c>)
 8001af6:	f7fe fc19 	bl	800032c <lcd_4bit_send_command>
		lcd_4bit_send_string(&DRIVER, "Close Gate");
 8001afa:	4908      	ldr	r1, [pc, #32]	; (8001b1c <Control_Gate+0x74>)
 8001afc:	4805      	ldr	r0, [pc, #20]	; (8001b14 <Control_Gate+0x6c>)
 8001afe:	f7fe fc85 	bl	800040c <lcd_4bit_send_string>
		PWM(SERVO, CH, 1); //45 degree
 8001b02:	2201      	movs	r2, #1
 8001b04:	6839      	ldr	r1, [r7, #0]
 8001b06:	68f8      	ldr	r0, [r7, #12]
 8001b08:	f7ff f870 	bl	8000bec <PWM>

	}

}
 8001b0c:	bf00      	nop
 8001b0e:	3710      	adds	r7, #16
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bd80      	pop	{r7, pc}
 8001b14:	20000070 	.word	0x20000070
 8001b18:	08001c34 	.word	0x08001c34
 8001b1c:	08001c40 	.word	0x08001c40

08001b20 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001b20:	480d      	ldr	r0, [pc, #52]	; (8001b58 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001b22:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001b24:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b28:	480c      	ldr	r0, [pc, #48]	; (8001b5c <LoopForever+0x6>)
  ldr r1, =_edata
 8001b2a:	490d      	ldr	r1, [pc, #52]	; (8001b60 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001b2c:	4a0d      	ldr	r2, [pc, #52]	; (8001b64 <LoopForever+0xe>)
  movs r3, #0
 8001b2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b30:	e002      	b.n	8001b38 <LoopCopyDataInit>

08001b32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b36:	3304      	adds	r3, #4

08001b38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b3c:	d3f9      	bcc.n	8001b32 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b3e:	4a0a      	ldr	r2, [pc, #40]	; (8001b68 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001b40:	4c0a      	ldr	r4, [pc, #40]	; (8001b6c <LoopForever+0x16>)
  movs r3, #0
 8001b42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b44:	e001      	b.n	8001b4a <LoopFillZerobss>

08001b46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b48:	3204      	adds	r2, #4

08001b4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b4c:	d3fb      	bcc.n	8001b46 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001b4e:	f000 f811 	bl	8001b74 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001b52:	f7ff fe0b 	bl	800176c <main>

08001b56 <LoopForever>:

LoopForever:
    b LoopForever
 8001b56:	e7fe      	b.n	8001b56 <LoopForever>
  ldr   r0, =_estack
 8001b58:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8001b5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b60:	200000f8 	.word	0x200000f8
  ldr r2, =_sidata
 8001b64:	08001c7c 	.word	0x08001c7c
  ldr r2, =_sbss
 8001b68:	200000f8 	.word	0x200000f8
  ldr r4, =_ebss
 8001b6c:	200001cc 	.word	0x200001cc

08001b70 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001b70:	e7fe      	b.n	8001b70 <ADC1_2_IRQHandler>
	...

08001b74 <__libc_init_array>:
 8001b74:	b570      	push	{r4, r5, r6, lr}
 8001b76:	2500      	movs	r5, #0
 8001b78:	4e0c      	ldr	r6, [pc, #48]	; (8001bac <__libc_init_array+0x38>)
 8001b7a:	4c0d      	ldr	r4, [pc, #52]	; (8001bb0 <__libc_init_array+0x3c>)
 8001b7c:	1ba4      	subs	r4, r4, r6
 8001b7e:	10a4      	asrs	r4, r4, #2
 8001b80:	42a5      	cmp	r5, r4
 8001b82:	d109      	bne.n	8001b98 <__libc_init_array+0x24>
 8001b84:	f000 f81a 	bl	8001bbc <_init>
 8001b88:	2500      	movs	r5, #0
 8001b8a:	4e0a      	ldr	r6, [pc, #40]	; (8001bb4 <__libc_init_array+0x40>)
 8001b8c:	4c0a      	ldr	r4, [pc, #40]	; (8001bb8 <__libc_init_array+0x44>)
 8001b8e:	1ba4      	subs	r4, r4, r6
 8001b90:	10a4      	asrs	r4, r4, #2
 8001b92:	42a5      	cmp	r5, r4
 8001b94:	d105      	bne.n	8001ba2 <__libc_init_array+0x2e>
 8001b96:	bd70      	pop	{r4, r5, r6, pc}
 8001b98:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001b9c:	4798      	blx	r3
 8001b9e:	3501      	adds	r5, #1
 8001ba0:	e7ee      	b.n	8001b80 <__libc_init_array+0xc>
 8001ba2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001ba6:	4798      	blx	r3
 8001ba8:	3501      	adds	r5, #1
 8001baa:	e7f2      	b.n	8001b92 <__libc_init_array+0x1e>
 8001bac:	08001c74 	.word	0x08001c74
 8001bb0:	08001c74 	.word	0x08001c74
 8001bb4:	08001c74 	.word	0x08001c74
 8001bb8:	08001c78 	.word	0x08001c78

08001bbc <_init>:
 8001bbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001bbe:	bf00      	nop
 8001bc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001bc2:	bc08      	pop	{r3}
 8001bc4:	469e      	mov	lr, r3
 8001bc6:	4770      	bx	lr

08001bc8 <_fini>:
 8001bc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001bca:	bf00      	nop
 8001bcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001bce:	bc08      	pop	{r3}
 8001bd0:	469e      	mov	lr, r3
 8001bd2:	4770      	bx	lr
